-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-11-08 17:47:00 CET
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adresa (
    adresa_id     INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    ulice         VARCHAR2(50) NOT NULL,
    cislo_popisne VARCHAR2(10) NOT NULL,
    mesto         VARCHAR2(100) NOT NULL,
    psc           VARCHAR2(20) NOT NULL,
    poznamka      VARCHAR2(250),
    stat_id       INTEGER NOT NULL
);
    
ALTER TABLE adresa ADD CONSTRAINT adresa_pk PRIMARY KEY ( adresa_id );

CREATE TABLE doprava (
    doprava_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nazev      VARCHAR2(50) NOT NULL
);

ALTER TABLE doprava ADD CONSTRAINT doprava_pk PRIMARY KEY ( doprava_id );

CREATE TABLE kontakt (
    kontakt_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    email      VARCHAR2(50) NOT NULL,
    telefon    VARCHAR2(20) NOT NULL
);

ALTER TABLE kontakt ADD CONSTRAINT kontakt_pk PRIMARY KEY ( kontakt_id );

CREATE TABLE log_table (
    log_id    INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    tabulka   VARCHAR2(32) NOT NULL,
    operace   VARCHAR2(15) NOT NULL,
    cas_zmeny TIMESTAMP NOT NULL,
    uzivatel  VARCHAR2(20) NOT NULL,
    pred      CLOB,
    po        CLOB
);

ALTER TABLE log_table ADD CONSTRAINT log_pk PRIMARY KEY ( log_id );

    CREATE TABLE objednavka (
        objednavka_id INTEGER
            GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
        NOT NULL,
        pocet_osob    INTEGER NOT NULL,
        termin_id     INTEGER NOT NULL,
        pojisteni_id  INTEGER NOT NULL,
        pokoj_id      INTEGER NOT NULL,
        zakaznik_id   INTEGER NOT NULL,
        CONSTRAINT check_pocet_osob CHECK (pocet_osob >= 1)
    );

ALTER TABLE objednavka ADD CONSTRAINT objednavka_pk PRIMARY KEY ( objednavka_id );

CREATE TABLE obrazky_ubytovani (
    obrazky_ubytovani_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    obrazek              BLOB NOT NULL,
    nazev                VARCHAR2(50) NOT NULL,
    ubytovani_id         INTEGER NOT NULL
);

ALTER TABLE obrazky_ubytovani ADD CONSTRAINT obrazky_ubytovani_pk PRIMARY KEY ( obrazky_ubytovani_id );

CREATE TABLE osoba (
    osoba_id  INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    jmeno     VARCHAR2(50) NOT NULL,
    prijmeni  VARCHAR2(50) NOT NULL,
    datum_narozeni DATE NOT NULL
);

ALTER TABLE osoba ADD CONSTRAINT osoba_pk PRIMARY KEY ( osoba_id );

CREATE TABLE osoba_objednavka (
    osoba_id           INTEGER NOT NULL,
    objednavka_id INTEGER NOT NULL
);

ALTER TABLE osoba_objednavka ADD CONSTRAINT osoba_objednavka_pk PRIMARY KEY ( osoba_id,
                                                                              objednavka_id );

CREATE TABLE platba (
    platba_id        INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    castka           NUMBER(10,2) NOT NULL,
    cislo_uctu       VARCHAR2(30),
    objednavka_id    INTEGER NOT NULL,
    zaplacena        NUMBER NOT NULL,
    CONSTRAINT check_castka CHECK (castka >= 0)
);

CREATE UNIQUE INDEX platba__idx ON
    platba (
        objednavka_id
    ASC );

ALTER TABLE platba ADD CONSTRAINT platba_pk PRIMARY KEY ( platba_id );

CREATE TABLE pojisteni (
    pojisteni_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    cena_za_den  NUMBER(10,2) NOT NULL,
    nazev        VARCHAR2(50) NOT NULL,
    CONSTRAINT check_cena_za_den CHECK (cena_za_den >= 0)
);

ALTER TABLE pojisteni ADD CONSTRAINT pojisteni_pk PRIMARY KEY ( pojisteni_id );

CREATE TABLE pokoj (
    pokoj_id   INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    pocet_mist NUMBER(10,2) NOT NULL,
    nazev      VARCHAR2(50) NOT NULL,
    CONSTRAINT check_pocet_mist CHECK (pocet_mist >= 1)
);

ALTER TABLE pokoj ADD CONSTRAINT pokoj_pk PRIMARY KEY ( pokoj_id );

CREATE TABLE pokoje_terminu (
    celkovy_pocet_pokoju    INTEGER NOT NULL,
    pocet_obsazenych_pokoju INTEGER NOT NULL,
    termin_id               INTEGER NOT NULL,
    pokoj_id                INTEGER NOT NULL,
    CONSTRAINT check_pocet_pokoju CHECK (pocet_obsazenych_pokoju <= celkovy_pocet_pokoju)
);

ALTER TABLE pokoje_terminu ADD CONSTRAINT pokoje_terminu_pk PRIMARY KEY ( termin_id,
                                                                          pokoj_id );

CREATE TABLE prihlasovaci_udaje (
    prihlasovaci_udaje_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    jmeno                 VARCHAR2(50) NOT NULL,
    heslo                 VARCHAR2(64) NOT NULL
);

ALTER TABLE prihlasovaci_udaje ADD CONSTRAINT prihlasovaci_udaje_pk PRIMARY KEY ( prihlasovaci_udaje_id );
CREATE INDEX idx_prihlasovaci_udaje_jmeno ON prihlasovaci_udaje(jmeno);
ALTER TABLE prihlasovaci_udaje
ADD CONSTRAINT jmeno_unique UNIQUE (jmeno);


CREATE TABLE role (
    role_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nazev   VARCHAR2(30) NOT NULL
);

ALTER TABLE role ADD CONSTRAINT role_pk PRIMARY KEY ( role_id );
ALTER TABLE role
ADD CONSTRAINT nazev_unique UNIQUE (nazev);

CREATE TABLE stat (
    stat_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    zkratka VARCHAR2(3) NOT NULL,
    nazev   VARCHAR2(100) NOT NULL
);

ALTER TABLE stat ADD CONSTRAINT stat_pk PRIMARY KEY ( stat_id );
CREATE INDEX idx_stat_zkrakta ON stat(zkratka);
ALTER TABLE stat
ADD CONSTRAINT zkratka_unique UNIQUE (zkratka);


CREATE TABLE strava (
    strava_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nazev     VARCHAR2(50) NOT NULL
);

ALTER TABLE strava ADD CONSTRAINT strava_pk PRIMARY KEY ( strava_id );

CREATE TABLE termin (
    termin_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    od        DATE NOT NULL,
    do        DATE NOT NULL,
    zajezd_id INTEGER,
    CONSTRAINT check_dates CHECK (od <= do)
);

ALTER TABLE termin ADD CONSTRAINT termin_pk PRIMARY KEY ( termin_id );
CREATE INDEX idx_termin_od ON termin(od);
CREATE INDEX idx_termin_do ON termin(do);

CREATE TABLE ubytovani (
    ubytovani_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    nazev        VARCHAR2(100) NOT NULL,
    popis        VARCHAR2(1000) NOT NULL,
    adresa_id    INTEGER NOT NULL,
    pocet_hvezd  NUMBER CHECK (pocet_hvezd BETWEEN 0 AND 5) NOT NULL
);

CREATE UNIQUE INDEX ubytovani__idx ON
    ubytovani (
        adresa_id
    ASC );

ALTER TABLE ubytovani ADD CONSTRAINT ubytovani_pk PRIMARY KEY ( ubytovani_id );

CREATE TABLE zajezd (
    zajezd_id     INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    popis         VARCHAR2(500),
    cena_za_osobu NUMBER NOT NULL,
    doprava_id    INTEGER NOT NULL,
    ubytovani_id  INTEGER NOT NULL,
    sleva_procent NUMBER,
    zobrazit      NUMBER NOT NULL,
    strava_id     INTEGER NOT NULL,
    CONSTRAINT check_cena_za_osobu CHECK (cena_za_osobu >= 0),
    CONSTRAINT check_sleva_procent CHECK (sleva_procent BETWEEN 0 AND 100)
);

ALTER TABLE zajezd ADD CONSTRAINT zajezd_pk PRIMARY KEY ( zajezd_id );

CREATE TABLE zakaznik (
    zakaznik_id           INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    prihlasovaci_udaje_id INTEGER NOT NULL,
    osoba_id              INTEGER NOT NULL,
    adresa_id             INTEGER NOT NULL,
    kontakt_id            INTEGER NOT NULL
);

CREATE UNIQUE INDEX zakaznik__idx ON
    zakaznik (
        prihlasovaci_udaje_id
    ASC );

CREATE UNIQUE INDEX zakaznik__idxv1 ON
    zakaznik (
        osoba_id
    ASC );
    
CREATE UNIQUE INDEX zakaznik__idxv2 ON
    zakaznik (
        kontakt_id
    ASC );
    
ALTER TABLE zakaznik ADD CONSTRAINT zakaznik_pk PRIMARY KEY ( zakaznik_id );

CREATE TABLE zamestnanec (
    zamestnanec_id        INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 NOCACHE ORDER )
    NOT NULL,
    role_id               INTEGER NOT NULL,
    prihlasovaci_udaje_id INTEGER NOT NULL,
    nadrizeny_id          INTEGER,
    jmeno                 VARCHAR2(50) NOT NULL,
    prijmeni              VARCHAR2(50) NOT NULL
);

CREATE UNIQUE INDEX zamestnanec__idx ON
    zamestnanec (
        prihlasovaci_udaje_id
    ASC );

ALTER TABLE zamestnanec ADD CONSTRAINT zamestnanec_pk PRIMARY KEY ( zamestnanec_id );

ALTER TABLE adresa
    ADD CONSTRAINT adresa_stat_fk FOREIGN KEY ( stat_id )
        REFERENCES stat ( stat_id );

ALTER TABLE objednavka
    ADD CONSTRAINT objednavka_pojisteni_fk FOREIGN KEY ( pojisteni_id )
        REFERENCES pojisteni ( pojisteni_id );

ALTER TABLE objednavka
    ADD CONSTRAINT objednavka_pokoj_fk FOREIGN KEY ( pokoj_id )
        REFERENCES pokoj ( pokoj_id );

ALTER TABLE objednavka
    ADD CONSTRAINT objednavka_termin_fk FOREIGN KEY ( termin_id )
        REFERENCES termin ( termin_id );

ALTER TABLE objednavka
    ADD CONSTRAINT objednavka_zakaznik_fk FOREIGN KEY ( zakaznik_id )
        REFERENCES zakaznik ( zakaznik_id );

ALTER TABLE obrazky_ubytovani
    ADD CONSTRAINT obrazky_ubytovani_ubytovani_fk FOREIGN KEY ( ubytovani_id )
        REFERENCES ubytovani ( ubytovani_id );

ALTER TABLE osoba_objednavka
    ADD CONSTRAINT osoba_objednavka_objednavka_fk FOREIGN KEY ( objednavka_id )
        REFERENCES objednavka ( objednavka_id );

ALTER TABLE osoba_objednavka
    ADD CONSTRAINT osoba_objednavka_osoba_fk FOREIGN KEY ( osoba_id )
        REFERENCES osoba ( osoba_id );

ALTER TABLE platba
    ADD CONSTRAINT platba_objednavka_fk FOREIGN KEY ( objednavka_id )
        REFERENCES objednavka ( objednavka_id );

ALTER TABLE pokoje_terminu
    ADD CONSTRAINT pokoje_terminu_pokoj_fk FOREIGN KEY ( pokoj_id )
        REFERENCES pokoj ( pokoj_id );

ALTER TABLE pokoje_terminu
    ADD CONSTRAINT pokoje_terminu_termin_fk FOREIGN KEY ( termin_id )
        REFERENCES termin ( termin_id );

ALTER TABLE termin
    ADD CONSTRAINT termin_zajezd_fk FOREIGN KEY ( zajezd_id )
        REFERENCES zajezd ( zajezd_id );

ALTER TABLE ubytovani
    ADD CONSTRAINT ubytovani_adresa_fk FOREIGN KEY ( adresa_id )
        REFERENCES adresa ( adresa_id );

ALTER TABLE zajezd
    ADD CONSTRAINT zajezd_doprava_fk FOREIGN KEY ( doprava_id )
        REFERENCES doprava ( doprava_id );

ALTER TABLE zajezd
    ADD CONSTRAINT zajezd_strava_fk FOREIGN KEY ( strava_id )
        REFERENCES strava ( strava_id );

ALTER TABLE zajezd
    ADD CONSTRAINT zajezd_ubytovani_fk FOREIGN KEY ( ubytovani_id )
        REFERENCES ubytovani ( ubytovani_id );

ALTER TABLE zakaznik
    ADD CONSTRAINT zakaznik_adresa_fk FOREIGN KEY ( adresa_id )
        REFERENCES adresa ( adresa_id );

ALTER TABLE zakaznik
    ADD CONSTRAINT zakaznik_osoba_fk FOREIGN KEY ( osoba_id )
        REFERENCES osoba ( osoba_id );
        
ALTER TABLE zakaznik
    ADD CONSTRAINT zakaznik_kontakt_fk FOREIGN KEY ( kontakt_id )
        REFERENCES kontakt ( kontakt_id );        

ALTER TABLE zakaznik
    ADD CONSTRAINT zakaznik_prihlasovaci_udaje_fk FOREIGN KEY ( prihlasovaci_udaje_id )
        REFERENCES prihlasovaci_udaje ( prihlasovaci_udaje_id );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_prihlasovaci_udaje_fk FOREIGN KEY ( prihlasovaci_udaje_id )
        REFERENCES prihlasovaci_udaje ( prihlasovaci_udaje_id );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_role_fk FOREIGN KEY ( role_id )
        REFERENCES role ( role_id );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_zamestnanec_fk FOREIGN KEY ( nadrizeny_id )
        REFERENCES zamestnanec ( zamestnanec_id );


CREATE OR REPLACE PACKAGE pck_security AS
  FUNCTION hash_hesla(str IN VARCHAR2) RETURN VARCHAR2;
  PROCEDURE login(
    p_usr_name IN VARCHAR2, 
    p_usr_pwd IN VARCHAR2, 
    p_cursor OUT SYS_REFCURSOR
  );
END pck_security;
/

CREATE OR REPLACE PACKAGE BODY pck_security AS

    FUNCTION hash_hesla(str IN VARCHAR2) RETURN VARCHAR2 IS
        v_checksum VARCHAR2(32);
    BEGIN
        v_checksum := LOWER( RAWTOHEX( UTL_RAW.CAST_TO_RAW(
            sys.dbms_obfuscation_toolkit.md5(input_string => str) 
        ) ) );
        RETURN v_checksum;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            RAISE;
    END hash_hesla;

  PROCEDURE login(
    p_usr_name IN VARCHAR2, 
    p_usr_pwd IN VARCHAR2, 
    p_cursor OUT SYS_REFCURSOR
  ) IS
    v_id PRIHLASOVACI_UDAJE.PRIHLASOVACI_UDAJE_ID%TYPE; 
    v_hashed_pwd VARCHAR2(64);
    v_role_id ZAMESTNANEC.ROLE_ID%TYPE;
    v_zamestnanec_id ZAMESTNANEC.ZAMESTNANEC_ID%TYPE;
    v_error_message VARCHAR2(255);
  BEGIN
    v_hashed_pwd := hash_hesla(p_usr_pwd);

    SELECT PRIHLASOVACI_UDAJE_ID INTO v_id
    FROM PRIHLASOVACI_UDAJE
    WHERE JMENO = p_usr_name
    AND HESLO = v_hashed_pwd;

    -- zakaznik
    BEGIN
        SELECT ZAKAZNIK_ID INTO v_id
        FROM ZAKAZNIK
        WHERE PRIHLASOVACI_UDAJE_ID = v_id;

        OPEN p_cursor FOR
        SELECT ZAKAZNIK_ID AS uzivatel_id, 'Zákazník' AS role
        FROM ZAKAZNIK
        WHERE ZAKAZNIK_ID = v_id;
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL; 
    END;

    -- zaměstnanec
    BEGIN
        SELECT z.ROLE_ID, z.ZAMESTNANEC_ID INTO v_role_id, v_zamestnanec_id
        FROM ZAMESTNANEC z
        WHERE z.PRIHLASOVACI_UDAJE_ID = v_id;

        OPEN p_cursor FOR
        SELECT ZAMESTNANEC_ID AS uzivatel_id, (SELECT r.NAZEV FROM ROLE r WHERE r.ROLE_ID = v_role_id) AS role
        FROM ZAMESTNANEC
        WHERE ZAMESTNANEC_ID = v_zamestnanec_id;
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN p_cursor FOR
            SELECT NULL AS uzivatel_id, 'Nesprávné jméno nebo heslo' AS role
            FROM DUAL;
            RETURN;
    END;
EXCEPTION
        WHEN OTHERS THEN
            v_error_message := 'Neočekávaný error se vyskytl: ' || SQLERRM;
            OPEN p_cursor FOR
            SELECT NULL AS uzivatel_id, v_error_message AS role
            FROM DUAL;
  END login;

END pck_security;
/


CREATE OR REPLACE PACKAGE pck_utils AS
  FUNCTION prvni_img_zajezdy(p_ubytovani_id UBYTOVANI.UBYTOVANI_ID%TYPE)
    RETURN OBRAZKY_UBYTOVANI.OBRAZKY_UBYTOVANI_ID%TYPE;
    
  FUNCTION zamestnanci_podrizeny(p_zamestnanec_id IN zamestnanec.zamestnanec_id%TYPE)
    RETURN VARCHAR2;
    
  FUNCTION calculate_castka(p_pojisteni_id INTEGER, p_termin_id INTEGER,p_pocet_osob INTEGER) 
   RETURN DECIMAL;
   
   PROCEDURE zlevni_zajezdy;
  
  PROCEDURE drop_all_tables;
END pck_utils;
/

CREATE OR REPLACE PACKAGE BODY pck_utils AS

FUNCTION prvni_img_zajezdy(p_ubytovani_id UBYTOVANI.UBYTOVANI_ID%TYPE)
RETURN OBRAZKY_UBYTOVANI.OBRAZKY_UBYTOVANI_ID%TYPE IS
    v_image_id OBRAZKY_UBYTOVANI.OBRAZKY_UBYTOVANI_ID%TYPE;
BEGIN
    SELECT OBRAZKY_UBYTOVANI_ID INTO v_image_id
    FROM (
        SELECT OBRAZKY_UBYTOVANI_ID
        FROM OBRAZKY_UBYTOVANI
        WHERE UBYTOVANI_ID = p_ubytovani_id
        ORDER BY NAZEV
    )
    WHERE ROWNUM = 1;

    RETURN v_image_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RAISE;
END prvni_img_zajezdy;

  
  FUNCTION zamestnanci_podrizeny(p_zamestnanec_id IN zamestnanec.zamestnanec_id%TYPE)
    RETURN VARCHAR2 IS
    CURSOR podrizeny_cursor IS
      SELECT z.jmeno, z.prijmeni
      FROM zamestnanec z
      WHERE z.zamestnanec_id != p_zamestnanec_id
      START WITH z.nadrizeny_id = p_zamestnanec_id
      CONNECT BY PRIOR z.zamestnanec_id = z.nadrizeny_id
      ORDER SIBLINGS BY z.jmeno;

    v_result VARCHAR2(250) := '';
    v_jmeno zamestnanec.jmeno%TYPE;
    v_prijmeni zamestnanec.prijmeni%TYPE;
  BEGIN
    OPEN podrizeny_cursor;
    LOOP
      FETCH podrizeny_cursor INTO v_jmeno, v_prijmeni;
      EXIT WHEN podrizeny_cursor%NOTFOUND;
      v_result := v_result || v_jmeno || ' ' || v_prijmeni || ', ';
    END LOOP;
    CLOSE podrizeny_cursor;
    RETURN RTRIM(v_result, ', ');
  END zamestnanci_podrizeny;

   FUNCTION calculate_castka(
    p_pojisteni_id INTEGER,
    p_termin_id    INTEGER,
    p_pocet_osob   INTEGER
  ) RETURN DECIMAL IS
    v_cena_za_osobu DECIMAL(10,2);
    v_cena_za_den DECIMAL(10,2);
    v_od DATE;
    v_do DATE;
    v_related_zajezd_id INTEGER;
    v_castka DECIMAL(10,2);
  BEGIN
    SELECT zajezd_id, od, do INTO v_related_zajezd_id, v_od, v_do FROM termin WHERE termin_id = p_termin_id;
    
    SELECT cena_za_osobu INTO v_cena_za_osobu FROM zajezd WHERE zajezd_id = v_related_zajezd_id;
    
    SELECT cena_za_den INTO v_cena_za_den FROM pojisteni WHERE pojisteni_id = p_pojisteni_id;
    
    v_castka := (p_pocet_osob * v_cena_za_osobu) + (p_pocet_osob * v_cena_za_den * (v_do - v_od));
    RETURN v_castka;
  END calculate_castka; 
  
    PROCEDURE zlevni_zajezdy IS
      CURSOR zajezdy_cur IS
        SELECT zajezd_id, cena_za_osobu
        FROM zajezd
        WHERE zobrazit = 1;
      
      v_sleva_procent NUMBER;
    BEGIN
      FOR rec IN zajezdy_cur LOOP
        IF rec.cena_za_osobu >= 10000 THEN
          -- zaokrouhlení ceny dolů na desetitisíce
          v_sleva_procent := ROUND((1 - (TRUNC(rec.cena_za_osobu, -4) / rec.cena_za_osobu)) * 100, 2);
        ELSE
          -- Cena je pod 10 000, sleva se nepočítá a je nastavena na 0%
          v_sleva_procent := 0;
        END IF;
    
        -- Aktualizujeme slevu pro daný zájezd
        UPDATE zajezd
        SET sleva_procent = v_sleva_procent
        WHERE zajezd_id = rec.zajezd_id;
      END LOOP;
      
      -- Ujistíme se, že změny jsou trvale uloženy
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        -- V případě chyby se transakce vrátí zpět a vypíše se chybová zpráva
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
    END zlevni_zajezdy;

    
  PROCEDURE drop_all_tables IS
  BEGIN
    FOR t IN (SELECT table_name FROM user_tables) LOOP
      EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS PURGE';
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Failed to drop and purge one or more tables: ' || SQLERRM);
  END drop_all_tables;

END pck_utils;
/

CREATE OR REPLACE PROCEDURE drop_all_objects IS
BEGIN
    -- Odstranění všech view
    FOR rec IN (SELECT view_name FROM user_views) LOOP
        EXECUTE IMMEDIATE 'DROP VIEW ' || rec.view_name;
    END LOOP;

    -- Odstranění všech triggerů
    FOR rec IN (SELECT trigger_name FROM user_triggers) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
    END LOOP;

    -- Odstranění všech balíčků
    FOR rec IN (SELECT object_name FROM user_objects WHERE object_type = 'PACKAGE') LOOP
        EXECUTE IMMEDIATE 'DROP PACKAGE ' || rec.object_name;
    END LOOP;

    -- Odstranění všech tabulek (včetně závislých objektů)
    FOR rec IN (SELECT table_name FROM user_tables) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS PURGE';
    END LOOP;

    -- Odstranění všech indexů
    FOR rec IN (SELECT index_name FROM user_indexes) LOOP
        EXECUTE IMMEDIATE 'DROP INDEX ' || rec.index_name;
    END LOOP;
    
    -- Odstranění sekvencí
    FOR rec IN (SELECT sequence_name FROM user_sequences) LOOP
        EXECUTE IMMEDIATE 'DROP SEQUENCE ' || rec.sequence_name;
    END LOOP;
    
        -- Odstranění všech procedur
    FOR rec IN (SELECT object_name FROM user_objects WHERE object_type = 'PROCEDURE') LOOP
        EXECUTE IMMEDIATE 'DROP PROCEDURE ' || rec.object_name;
    END LOOP;

    -- Odstranění všech funkcí
    FOR rec IN (SELECT object_name FROM user_objects WHERE object_type = 'FUNCTION') LOOP
        EXECUTE IMMEDIATE 'DROP FUNCTION ' || rec.object_name;
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Došlo k chybě: ' || SQLERRM);
END drop_all_objects;
/


CREATE OR REPLACE PACKAGE pck_adresa AS

    PROCEDURE manage_adresa(
        p_adresa_id     IN OUT ADRESA.ADRESA_ID%type,
        p_psc           IN adresa.psc%TYPE,
        p_stat_id       IN adresa.stat_id%TYPE,
        p_ulice         IN adresa.ulice%TYPE,
        p_mesto         IN adresa.mesto%TYPE,
        p_cislo_popisne IN adresa.cislo_popisne%TYPE,
        p_poznamka      IN adresa.poznamka%TYPE DEFAULT NULL,
        o_result        OUT CLOB
    );

    PROCEDURE delete_adresa(
        p_adresa_id     IN ADRESA.ADRESA_ID%type,
        o_result        OUT CLOB
    );

END pck_adresa;
/

CREATE OR REPLACE PACKAGE BODY pck_adresa AS

    PROCEDURE manage_adresa(
        p_adresa_id     IN OUT ADRESA.ADRESA_ID%type,
        p_psc           IN adresa.psc%TYPE,
        p_stat_id       IN adresa.stat_id%TYPE,
        p_ulice         IN adresa.ulice%TYPE,
        p_mesto         IN adresa.mesto%TYPE,
        p_cislo_popisne IN adresa.cislo_popisne%TYPE,
        p_poznamka      IN adresa.poznamka%TYPE DEFAULT NULL,
        o_result        OUT CLOB
    ) IS
    BEGIN
        IF p_adresa_id IS NULL THEN
            INSERT INTO ADRESA(ULICE, CISLO_POPISNE, MESTO, PSC, POZNAMKA, STAT_ID)
                VALUES(p_ulice, p_cislo_popisne, p_mesto, p_psc, p_poznamka, p_stat_id)
                returning adresa_id into p_adresa_id;
                o_result := '{ "status": "OK", "message": "Adresa byla uspesne vytvorena." }';
        ELSE
             UPDATE ADRESA
                SET ULICE = p_ulice,
                    CISLO_POPISNE = p_cislo_popisne,
                    MESTO = p_mesto,
                    PSC = p_psc,
                    POZNAMKA = p_poznamka,
                    STAT_ID = p_stat_id
                WHERE ADRESA_ID = p_adresa_id;
                
                IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID adresy nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Adresa aktualizov�n �sp?�n?." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba p?i operaci: ' || SQLERRM || '" }';
    END manage_adresa;

    PROCEDURE delete_adresa(
         p_adresa_id     IN ADRESA.ADRESA_ID%type,
        o_result        OUT CLOB
    ) IS
    BEGIN
        IF p_adresa_id IS NOT NULL THEN 
            DELETE FROM ADRESA WHERE ADRESA_ID =  p_adresa_id;
        
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID adresy nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Adresa smaz�na �sp?�n?." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba p?i operaci: ' || SQLERRM || '" }';
    END delete_adresa;

END pck_adresa;
/

CREATE OR REPLACE PACKAGE pck_kontakt AS

    PROCEDURE manage_kontakt(
        p_telefon       IN kontakt.telefon%TYPE,
        p_kontakt_id    IN OUT kontakt.kontakt_id%TYPE,
        p_email         IN kontakt.email%TYPE,
        o_result        OUT CLOB
    );

    PROCEDURE delete_kontakt(
        p_kontakt_id IN kontakt.kontakt_id%TYPE,
        o_result     OUT CLOB
    );

END pck_kontakt;
/

CREATE OR REPLACE PACKAGE BODY pck_kontakt AS

    PROCEDURE manage_kontakt(
        p_telefon       IN kontakt.telefon%TYPE,
        p_kontakt_id    IN OUT kontakt.kontakt_id%TYPE,
        p_email         IN kontakt.email%TYPE,
        o_result        OUT CLOB
    ) IS
    BEGIN
        IF p_kontakt_id IS NULL THEN
            INSERT INTO kontakt
                 (telefon,
                 email)
            VALUES
                (p_telefon,
                 p_email)
            RETURNING kontakt_id INTO p_kontakt_id;
            o_result := '{ "status": "OK", "message": "Kontakt byl uspesne vytvoren." }';
        ELSE
            UPDATE kontakt
            SET    telefon = p_telefon,
                   email = p_email
            WHERE  kontakt_id = p_kontakt_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID kontakt nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Kontakt aktualizován úspěšně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END manage_kontakt;

    PROCEDURE delete_kontakt(
        p_kontakt_id IN kontakt.kontakt_id%TYPE,
        o_result     OUT CLOB
    ) IS
    BEGIN
        IF p_kontakt_id IS NOT NULL THEN 
            DELETE FROM kontakt WHERE kontakt_id = p_kontakt_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID adresy nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Kontakt smazán úspěšně." }';
            END IF;
        ELSE
            o_result := '{ "status": "error", "message": "Chyba: Nebylo zadáno žádné ID kontaktu pro smazání." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END delete_kontakt;

END pck_kontakt;
/

CREATE OR REPLACE PACKAGE pck_log AS

    PROCEDURE manage_log(
        p_log_id   IN OUT LOG_TABLE.log_id%TYPE,
        p_tabulka  IN LOG_TABLE.tabulka%TYPE,
        p_operace  IN LOG_TABLE.operace%TYPE,
        p_cas_zmeny IN LOG_TABLE.cas_zmeny%TYPE,
        p_uzivatel  IN LOG_TABLE.uzivatel%TYPE,
        p_pred     IN LOG_TABLE.pred%TYPE,
        p_po       IN LOG_TABLE.po%TYPE,
        o_result   OUT CLOB
    );

    PROCEDURE delete_log(
        p_log_id   IN LOG_TABLE.log_id%TYPE,
        o_result   OUT CLOB
    );

END pck_log;
/

CREATE OR REPLACE PACKAGE BODY pck_log AS

    PROCEDURE manage_log(
        p_log_id   IN OUT LOG_TABLE.log_id%TYPE,
        p_tabulka  IN LOG_TABLE.tabulka%TYPE,
        p_operace  IN LOG_TABLE.operace%TYPE,
        p_cas_zmeny IN LOG_TABLE.cas_zmeny%TYPE,
        p_uzivatel  IN LOG_TABLE.uzivatel%TYPE,
        p_pred     IN LOG_TABLE.pred%TYPE,
        p_po       IN LOG_TABLE.po%TYPE,
        o_result   OUT CLOB
    ) IS
    BEGIN
        IF p_log_id IS NULL THEN
            INSERT INTO LOG_TABLE (tabulka, operace, cas_zmeny, uzivatel, pred, po)
            VALUES (p_tabulka, p_operace, p_cas_zmeny, p_uzivatel, p_pred, p_po)
            RETURNING log_id INTO p_log_id;
            
            o_result := '{ "status": "OK", "message": "Log zaznam byl uspesne vytvoren." }';
        ELSE
            UPDATE LOG_TABLE
            SET tabulka = p_tabulka,
                operace = p_operace,
                cas_zmeny = p_cas_zmeny,
                uzivatel = p_uzivatel,
                pred = p_pred,
                po = p_po
            WHERE log_id = p_log_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: LOG_ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Log zaznam byl uspesne aktualizovan." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_log;

    PROCEDURE delete_log(
        p_log_id   IN LOG_TABLE.log_id%TYPE,
        o_result   OUT CLOB
    ) IS
    BEGIN
        DELETE FROM LOG_TABLE WHERE log_id = p_log_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Log nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": Log byl smazan." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_log;

END pck_log;
/

CREATE OR REPLACE PACKAGE pck_objednavka AS

    PROCEDURE manage_objednavka(
        p_objednavka_id IN OUT OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        p_pocet_osob IN OBJEDNAVKA.POCET_OSOB%TYPE,
        p_termin_id IN OBJEDNAVKA.TERMIN_ID%TYPE,
        p_pojisteni_id IN OBJEDNAVKA.POJISTENI_ID%TYPE DEFAULT NULL,
        p_pokoj_id IN OBJEDNAVKA.POKOJ_ID%TYPE,
        p_zakaznik_id IN OBJEDNAVKA.ZAKAZNIK_ID%TYPE,
        o_result OUT CLOB
    );

    PROCEDURE delete_objednavka(
        p_objednavka_id IN OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    );

END pck_objednavka;
/

CREATE OR REPLACE PACKAGE BODY pck_objednavka AS

    PROCEDURE manage_objednavka(
        p_objednavka_id IN OUT OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        p_pocet_osob IN OBJEDNAVKA.POCET_OSOB%TYPE,
        p_termin_id IN OBJEDNAVKA.TERMIN_ID%TYPE,
        p_pojisteni_id IN OBJEDNAVKA.POJISTENI_ID%TYPE DEFAULT NULL,
        p_pokoj_id IN OBJEDNAVKA.POKOJ_ID%TYPE,
        p_zakaznik_id IN OBJEDNAVKA.ZAKAZNIK_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        IF p_objednavka_id IS NULL THEN
            INSERT INTO OBJEDNAVKA
                (POCET_OSOB, TERMIN_ID, POJISTENI_ID, POKOJ_ID, ZAKAZNIK_ID)
            VALUES
                (p_pocet_osob, p_termin_id, p_pojisteni_id, p_pokoj_id, p_zakaznik_id)
            RETURNING OBJEDNAVKA_ID INTO p_objednavka_id;

            o_result := '{ "status": "OK", "message": "Nová objednávka byla úspěšně vytvořena." }';
        ELSE
            UPDATE OBJEDNAVKA
            SET
                POCET_OSOB = p_pocet_osob,
                TERMIN_ID = p_termin_id,
                POJISTENI_ID = p_pojisteni_id,
                POKOJ_ID = p_pokoj_id,
                ZAKAZNIK_ID = p_zakaznik_id
            WHERE
                OBJEDNAVKA_ID = p_objednavka_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: Objednávka s daným ID nebyla nalezena." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Objednávka byla úspěšně aktualizována." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '" }';
    END manage_objednavka;

    PROCEDURE delete_objednavka(
        p_objednavka_id IN OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM OBJEDNAVKA WHERE OBJEDNAVKA_ID = p_objednavka_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Chyba: Objednávka s daným ID nebyla nalezena." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Objednávka byla úspěšně smazána." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '" }';
    END delete_objednavka;

END pck_objednavka;
/

CREATE OR REPLACE PACKAGE pck_obrazky_ubytovani AS

    PROCEDURE manage_obrazky_ubytovani(
        p_obrazky_ubytovani_id IN OUT obrazky_ubytovani.obrazky_ubytovani_id%TYPE,
        p_obrazek              IN obrazky_ubytovani.obrazek%TYPE,
        p_nazev                IN obrazky_ubytovani.nazev%TYPE,
        p_ubytovani_id         IN obrazky_ubytovani.ubytovani_id%TYPE,
        o_result               OUT CLOB
    );

    PROCEDURE delete_obrazky_ubytovani(
        p_obrazky_ubytovani_id IN obrazky_ubytovani.obrazky_ubytovani_id%TYPE,
        o_result               OUT CLOB
    );

END pck_obrazky_ubytovani;
/

CREATE OR REPLACE PACKAGE BODY pck_obrazky_ubytovani AS

    PROCEDURE manage_obrazky_ubytovani(
        p_obrazky_ubytovani_id IN OUT obrazky_ubytovani.obrazky_ubytovani_id%TYPE,
        p_obrazek              IN obrazky_ubytovani.obrazek%TYPE,
        p_nazev                IN obrazky_ubytovani.nazev%TYPE,
        p_ubytovani_id         IN obrazky_ubytovani.ubytovani_id%TYPE,
        o_result               OUT CLOB
    ) IS
    BEGIN
        IF p_obrazky_ubytovani_id IS NULL THEN
            INSERT INTO obrazky_ubytovani (obrazek, nazev, ubytovani_id)
            VALUES (p_obrazek, p_nazev, p_ubytovani_id)
            RETURNING obrazky_ubytovani_id INTO p_obrazky_ubytovani_id;
            
            o_result := '{ "status": "OK", "message": "Nový obrázek byl úspěšně vytvořen." }';
        ELSE
            UPDATE obrazky_ubytovani
            SET obrazek     = p_obrazek,
                nazev       = p_nazev,
                ubytovani_id = p_ubytovani_id
            WHERE obrazky_ubytovani_id = p_obrazky_ubytovani_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: Obrázek s daným ID nebyl nalezen." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Obrázek byl úspěšně aktualizován." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '" }';
    END manage_obrazky_ubytovani;

    PROCEDURE delete_obrazky_ubytovani(
        p_obrazky_ubytovani_id IN OBRAZKY_UBYTOVANI.OBRAZKY_UBYTOVANI_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM OBRAZKY_UBYTOVANI WHERE OBRAZKY_UBYTOVANI_ID = p_obrazky_ubytovani_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Chyba: Obrázek s daným ID nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Obrázek byl úspěšně smazán." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '" }';
    END delete_obrazky_ubytovani;

END pck_obrazky_ubytovani;
/

CREATE OR REPLACE PACKAGE pck_osoba_objednavka AS

    PROCEDURE manage_osoba_objednavka(
        p_osoba_id IN OSOBA_OBJEDNAVKA.OSOBA_ID%TYPE,
        p_objednavka_id IN OSOBA_OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    );

    PROCEDURE delete_osoba_objednavka(
        p_osoba_id IN OSOBA_OBJEDNAVKA.OSOBA_ID%TYPE,
        p_objednavka_id IN OSOBA_OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    );

END pck_osoba_objednavka;
/

CREATE OR REPLACE PACKAGE BODY pck_osoba_objednavka AS

    PROCEDURE manage_osoba_objednavka(
        p_osoba_id IN OSOBA_OBJEDNAVKA.OSOBA_ID%TYPE,
        p_objednavka_id IN OSOBA_OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        INSERT INTO OSOBA_OBJEDNAVKA (OSOBA_ID, OBJEDNAVKA_ID)
        VALUES (p_osoba_id, p_objednavka_id);

        o_result := '{"status": "OK", "message": "Záznam byl úspěně vytvořen."}';
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Chyba při operaci: ' || SQLERRM || '"}';
    END manage_osoba_objednavka;

    PROCEDURE delete_osoba_objednavka(
        p_osoba_id IN OSOBA_OBJEDNAVKA.OSOBA_ID%TYPE,
        p_objednavka_id IN OSOBA_OBJEDNAVKA.OBJEDNAVKA_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM OSOBA_OBJEDNAVKA WHERE OSOBA_ID = p_osoba_id AND OBJEDNAVKA_ID = p_objednavka_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{"status": "error", "message": "Chyba: Záznam nebyl nalezen."}';
        ELSE
            o_result := '{"status": "OK", "message": "Záznam byl úspěně smazán."}';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Chyba při operaci: ' || SQLERRM || '"}';
    END delete_osoba_objednavka;

END pck_osoba_objednavka;
/

CREATE OR REPLACE PACKAGE pck_osoba AS

    PROCEDURE manage_osoba(
        p_osoba_id      IN OUT osoba.osoba_id%TYPE,
        p_prijmeni      IN osoba.prijmeni%TYPE,
        p_jmeno         IN osoba.jmeno%TYPE,
        p_datum_narozeni IN osoba.datum_narozeni%TYPE,
        o_result        OUT CLOB
    );

    PROCEDURE delete_osoba(
        p_osoba_id  IN osoba.osoba_id%TYPE,
        o_result    OUT CLOB
    );

END pck_osoba;
/

CREATE OR REPLACE PACKAGE BODY pck_osoba AS

    PROCEDURE manage_osoba(
        p_osoba_id      IN OUT osoba.osoba_id%TYPE,
        p_prijmeni      IN osoba.prijmeni%TYPE,
        p_jmeno         IN osoba.jmeno%TYPE,
        p_datum_narozeni IN osoba.datum_narozeni%TYPE,
        o_result        OUT CLOB
    ) IS
    BEGIN
        IF p_osoba_id IS NULL THEN
            INSERT INTO osoba
                (jmeno,
                 prijmeni,
                 datum_narozeni)
            VALUES
                (p_jmeno,
                 p_prijmeni,
                 p_datum_narozeni)
            RETURNING osoba_id INTO p_osoba_id;
            o_result := '{ "status": "OK", "message": "Osoba byla uspesne vytvorena." }';
        ELSE
            UPDATE osoba
            SET
                jmeno = p_jmeno,
                prijmeni = p_prijmeni,
                datum_narozeni = p_datum_narozeni
            WHERE
                osoba_id = p_osoba_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID osoby nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Osoba aktualizována úspěšně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END manage_osoba;

    PROCEDURE delete_osoba(
        p_osoba_id  IN osoba.osoba_id%TYPE,
        o_result    OUT CLOB
    ) IS
    BEGIN
        IF p_osoba_id IS NOT NULL THEN
            DELETE FROM osoba WHERE osoba_id = p_osoba_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID osoby nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Osoba smazána úspěšně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END delete_osoba;

END pck_osoba;
/

CREATE OR REPLACE PACKAGE pck_platba AS

    PROCEDURE manage_platba(
        p_platba_id        IN OUT platba.platba_id%TYPE,
        p_castka           IN platba.castka%TYPE,
        p_cislo_uctu       IN platba.cislo_uctu%TYPE,
        p_objednavka_id    IN platba.objednavka_id%TYPE,
        p_zaplacena        IN platba.zaplacena%TYPE,
        o_result           OUT CLOB
    );
    
    PROCEDURE zaplat_platba(
        p_platba_id        IN platba.platba_id%TYPE,
        p_cislo_uctu       IN platba.cislo_uctu%TYPE,
        o_result           OUT CLOB
    );

    PROCEDURE delete_platba(
        p_platba_id        IN platba.platba_id%TYPE,
        o_result           OUT CLOB
    );

END pck_platba;
/

CREATE OR REPLACE PACKAGE BODY pck_platba AS

    PROCEDURE manage_platba(
        p_platba_id        IN OUT platba.platba_id%TYPE,
        p_castka           IN platba.castka%TYPE,
        p_cislo_uctu       IN platba.cislo_uctu%TYPE,
        p_objednavka_id    IN platba.objednavka_id%TYPE,
        p_zaplacena        IN platba.zaplacena%TYPE,
        o_result           OUT CLOB
    ) IS
    BEGIN
        IF p_platba_id IS NULL THEN
            INSERT INTO platba
                (castka, cislo_uctu, objednavka_id, zaplacena)
            VALUES
                (p_castka, p_cislo_uctu, p_objednavka_id, p_zaplacena)
            RETURNING platba_id INTO p_platba_id;

            o_result := '{"status": "OK", "message": "Nová platba byla úspěně vytvořena."}';
        ELSE
            UPDATE platba
            SET
                castka = p_castka,
                cislo_uctu = p_cislo_uctu,
                objednavka_id = p_objednavka_id,
                zaplacena = p_zaplacena
            WHERE
                platba_id = p_platba_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{"status": "error", "message": "Chyba: Platba s daným ID nebyla nalezena."}';
            ELSE
                o_result := '{"status": "OK", "message": "Platba byla úspěně aktualizována."}';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END manage_platba;
    
    PROCEDURE zaplat_platba(
    p_platba_id        IN platba.platba_id%TYPE,
    p_cislo_uctu       IN platba.cislo_uctu%TYPE,
    o_result           OUT CLOB
    ) IS
    BEGIN
    UPDATE platba
    SET
        cislo_uctu = p_cislo_uctu,
        zaplacena = 1
    WHERE
        platba_id = p_platba_id;

    IF SQL%ROWCOUNT = 0 THEN
        o_result := '{"status": "error", "message": "Chyba: Platba s daným ID nebyla nalezena."}';
    ELSE
        o_result := '{"status": "OK", "message": "Platba byla úspěšně zaplacena."}';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END zaplat_platba;


    PROCEDURE delete_platba(
        p_platba_id        IN platba.platba_id%TYPE,
        o_result           OUT CLOB
    ) IS
    BEGIN
        DELETE FROM platba WHERE platba_id = p_platba_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{"status": "error", "message": "Chyba: Platba s daným ID nebyla nalezena."}';
        ELSE
            o_result := '{"status": "OK", "message": "Platba byla úspěně smazána."}';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END delete_platba;

END pck_platba;
/

CREATE OR REPLACE PACKAGE pck_pojisteni AS

    PROCEDURE manage_pojisteni(
        p_pojisteni_id IN OUT pojisteni.pojisteni_id%TYPE,
        p_cena_za_den IN pojisteni.cena_za_den%TYPE,
        p_nazev       IN pojisteni.nazev%TYPE,
        o_result      OUT CLOB
    );

    PROCEDURE delete_pojisteni(
        p_pojisteni_id IN pojisteni.pojisteni_id%TYPE,
        o_result      OUT CLOB
    );

END pck_pojisteni;
/

CREATE OR REPLACE PACKAGE BODY pck_pojisteni AS

    PROCEDURE manage_pojisteni(
        p_pojisteni_id IN OUT pojisteni.pojisteni_id%TYPE,
        p_cena_za_den IN pojisteni.cena_za_den%TYPE,
        p_nazev       IN pojisteni.nazev%TYPE,
        o_result      OUT CLOB
    ) IS
    BEGIN
        IF p_pojisteni_id IS NULL THEN
            INSERT INTO pojisteni
                (cena_za_den, nazev)
            VALUES
                (p_cena_za_den, p_nazev)
            RETURNING pojisteni_id INTO p_pojisteni_id;

            o_result := '{"status": "OK", "message": "Nové pojistění bylo úspěně vytvořeno."}';
        ELSE
            UPDATE pojisteni
            SET
                cena_za_den = p_cena_za_den,
                nazev = p_nazev
            WHERE
                pojisteni_id = p_pojisteni_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{"status": "error", "message": "Chyba: Pojistění s daným ID nebylo nalezeno."}';
            ELSE
                o_result := '{"status": "OK", "message": "Pojistění bylo úspěně aktualizováno."}';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END manage_pojisteni;

    PROCEDURE delete_pojisteni(
        p_pojisteni_id IN pojisteni.pojisteni_id%TYPE,
        o_result      OUT CLOB
    ) IS
    BEGIN
        DELETE FROM pojisteni WHERE pojisteni_id = p_pojisteni_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{"status": "error", "message": "Chyba: Pojistění s daným ID nebylo nalezeno."}';
        ELSE
            o_result := '{"status": "OK", "message": "Pojistění bylo úspěně smazáno."}';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END delete_pojisteni;

END pck_pojisteni;
/

CREATE OR REPLACE PACKAGE pck_pokoj AS

    PROCEDURE manage_pokoj(
        p_pokoj_id   IN OUT pokoj.pokoj_id%TYPE,
        p_pocet_mist IN pokoj.pocet_mist%TYPE,
        p_nazev      IN pokoj.nazev%TYPE,
        o_result     OUT CLOB
    );

    PROCEDURE delete_pokoj(
        p_pokoj_id   IN pokoj.pokoj_id%TYPE,
        o_result     OUT CLOB
    );

END pck_pokoj;
/

CREATE OR REPLACE PACKAGE BODY pck_pokoj AS

    PROCEDURE manage_pokoj(
        p_pokoj_id   IN OUT pokoj.pokoj_id%TYPE,
        p_pocet_mist IN pokoj.pocet_mist%TYPE,
        p_nazev      IN pokoj.nazev%TYPE,
        o_result     OUT CLOB
    ) IS
    BEGIN
        IF p_pokoj_id IS NULL THEN
            INSERT INTO pokoj (pocet_mist, nazev)
            VALUES (p_pocet_mist, p_nazev)
            RETURNING pokoj_id INTO p_pokoj_id;
            o_result := '{"status": "OK", "message": "Nový pokoj byl úspěně vytvořen."}';
        ELSE
            UPDATE pokoj
            SET pocet_mist = p_pocet_mist,
                nazev = p_nazev
            WHERE pokoj_id = p_pokoj_id;
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{"status": "error", "message": "Chyba: Pokoj s daným ID nebyl nalezen."}';
            ELSE
                o_result := '{"status": "OK", "message": "Pokoj byl úspěně aktualizován."}';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END manage_pokoj;

    PROCEDURE delete_pokoj(
        p_pokoj_id   IN pokoj.pokoj_id%TYPE,
        o_result     OUT CLOB
    ) IS
    BEGIN
        DELETE FROM pokoj WHERE pokoj_id = p_pokoj_id;
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{"status": "error", "message": "Chyba: Pokoj s daným ID nebyl nalezen."}';
        ELSE
            o_result := '{"status": "OK", "message": "Pokoj byl úspěně smazán."}';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{"status": "error", "message": "Došlo k chybě při zpracování: ' || SQLERRM || '"}';
    END delete_pokoj;

END pck_pokoj;
/

CREATE OR REPLACE PACKAGE pck_pokoje_terminu AS

    PROCEDURE manage_pokoje_terminu(
        p_termin_id IN OUT POKOJE_TERMINU.TERMIN_ID%TYPE,
        p_celkovy_pocet_pokoju IN POKOJE_TERMINU.CELKOVY_POCET_POKOJU%TYPE,
        p_pocet_obsazenych_pokoju IN POKOJE_TERMINU.POCET_OBSAZENYCH_POKOJU%TYPE,
        p_pokoj_id IN OUT POKOJE_TERMINU.POKOJ_ID%TYPE,
        o_result OUT CLOB
    );

    PROCEDURE delete_pokoje_terminu(
        p_termin_id IN POKOJE_TERMINU.TERMIN_ID%TYPE,
        p_pokoj_id IN POKOJE_TERMINU.POKOJ_ID%TYPE,
        o_result OUT CLOB
    );
    
    PROCEDURE delete_pokoje_terminu(
        p_termin_id IN pokoje_terminu.termin_id%TYPE,
        o_result OUT CLOB
    );

END pck_pokoje_terminu;
/

CREATE OR REPLACE PACKAGE BODY pck_pokoje_terminu AS

    PROCEDURE manage_pokoje_terminu(
        p_termin_id IN OUT POKOJE_TERMINU.TERMIN_ID%TYPE,
        p_celkovy_pocet_pokoju IN POKOJE_TERMINU.CELKOVY_POCET_POKOJU%TYPE,
        p_pocet_obsazenych_pokoju IN POKOJE_TERMINU.POCET_OBSAZENYCH_POKOJU%TYPE,
        p_pokoj_id IN OUT POKOJE_TERMINU.POKOJ_ID%TYPE,
        o_result OUT CLOB
    ) IS
        v_exists NUMBER;
    BEGIN
        SELECT COUNT(*)
    INTO v_exists
    FROM POKOJE_TERMINU
    WHERE TERMIN_ID = p_termin_id AND POKOJ_ID = p_pokoj_id;

    IF v_exists > 0 THEN
        UPDATE POKOJE_TERMINU
        SET CELKOVY_POCET_POKOJU = p_celkovy_pocet_pokoju,
            POCET_OBSAZENYCH_POKOJU = p_pocet_obsazenych_pokoju
        WHERE TERMIN_ID = p_termin_id AND POKOJ_ID = p_pokoj_id;

        o_result := '{ "status": "OK", "message": "Záznam byl úspěně aktualizován." }';
    ELSE
        INSERT INTO POKOJE_TERMINU (CELKOVY_POCET_POKOJU, POCET_OBSAZENYCH_POKOJU, POKOJ_ID, TERMIN_ID)
        VALUES (p_celkovy_pocet_pokoju, p_pocet_obsazenych_pokoju, p_pokoj_id, p_termin_id)
        RETURNING TERMIN_ID, POKOJ_ID INTO p_termin_id, p_pokoj_id;

        o_result := '{ "status": "OK", "message": "Nový záznam byl úspěně vytvořen." }';
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || REPLACE(SQLERRM, '"', '\"') || '" }';
END manage_pokoje_terminu;

    PROCEDURE delete_pokoje_terminu(
        p_termin_id IN POKOJE_TERMINU.TERMIN_ID%TYPE,
        p_pokoj_id IN POKOJE_TERMINU.POKOJ_ID%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM POKOJE_TERMINU WHERE TERMIN_ID = p_termin_id AND POKOJ_ID = p_pokoj_id;
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Chyba: Záznam s daným ID nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Záznam byl úspěně smazán." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || REPLACE(SQLERRM, '"', '\"') || '" }';
    END delete_pokoje_terminu;
    
    PROCEDURE delete_pokoje_terminu(
        p_termin_id IN pokoje_terminu.termin_id%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM pokoje_terminu WHERE termin_id = p_termin_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Chyba: Záznam s daným ID nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Záznam byl úspěně smazán." }';
        END IF;
        
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při zpracování: ' || REPLACE(SQLERRM, '"', '\"') || '" }';
    END delete_pokoje_terminu;

END pck_pokoje_terminu;
/

CREATE OR REPLACE PACKAGE pck_prihlasovaci_udaje AS

    PROCEDURE manage_prihlasovaci_udaje(
    p_prihlasovaci_udaje_id IN OUT prihlasovaci_udaje.PRIHLASOVACI_UDAJE_ID%TYPE,
    p_jmeno    IN prihlasovaci_udaje.jmeno%TYPE,
    p_heslo    IN prihlasovaci_udaje.heslo%TYPE,
    o_result   OUT CLOB
    );

    PROCEDURE delete_prihlasovaci_udaje(
        p_prihlasovaci_udaje_id IN prihlasovaci_udaje.PRIHLASOVACI_UDAJE_ID%TYPE,
        o_result   OUT CLOB
    );

END pck_prihlasovaci_udaje;
/

CREATE OR REPLACE PACKAGE BODY pck_prihlasovaci_udaje AS

     PROCEDURE manage_prihlasovaci_udaje(
        p_prihlasovaci_udaje_id IN OUT prihlasovaci_udaje.PRIHLASOVACI_UDAJE_ID%TYPE,
        p_jmeno    IN prihlasovaci_udaje.jmeno%TYPE,
        p_heslo    IN prihlasovaci_udaje.heslo%TYPE,
        o_result   OUT CLOB
    ) IS
    BEGIN
        IF p_prihlasovaci_udaje_id IS NULL THEN
        INSERT INTO prihlasovaci_udaje
              (jmeno, heslo)
        VALUES (p_jmeno, pck_security.hash_hesla(p_heslo))
        RETURNING prihlasovaci_udaje_id INTO p_prihlasovaci_udaje_id;

        o_result := '{ "status": "OK", "message": "Údaje byly úspěšně vytvořeny." }';
    ELSE
        IF p_jmeno IS NULL AND p_heslo IS NULL THEN
            o_result := '{ "status": "OK", "message": "Nebyly zadány údaje k vyplnění." }';
        ELSE
            IF  p_jmeno IS NOT NULL AND p_heslo IS NULL THEN
                UPDATE prihlasovaci_udaje
                SET jmeno = p_jmeno
                WHERE prihlasovaci_udaje_id = p_prihlasovaci_udaje_id;
            END IF;

            IF p_jmeno IS NULL AND p_heslo IS NOT NULL THEN
                UPDATE prihlasovaci_udaje
                SET heslo = pck_security.hash_hesla(p_heslo)
                WHERE prihlasovaci_udaje_id = p_prihlasovaci_udaje_id;
            END IF;
                
            IF p_jmeno IS NOT NULL AND p_heslo IS NOT NULL THEN
                UPDATE prihlasovaci_udaje
                SET jmeno = p_jmeno,
                    heslo = pck_security.hash_hesla(p_heslo)
                WHERE prihlasovaci_udaje_id = p_prihlasovaci_udaje_id;
            END IF;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID údaje nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Údaje aktualizovány úspěšně." }';
            END IF;
        END IF;
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
        o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END manage_prihlasovaci_udaje;

    PROCEDURE delete_prihlasovaci_udaje(
       p_prihlasovaci_udaje_id IN prihlasovaci_udaje.PRIHLASOVACI_UDAJE_ID%TYPE,
        o_result   OUT CLOB
    ) IS
    BEGIN
        IF p_prihlasovaci_udaje_id IS NOT NULL THEN
            DELETE FROM prihlasovaci_udaje WHERE prihlasovaci_udaje_id = p_prihlasovaci_udaje_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID údaje nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Údaje smazány úspěšně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END delete_prihlasovaci_udaje;

END pck_prihlasovaci_udaje;
/

CREATE OR REPLACE PACKAGE pck_role AS

    PROCEDURE manage_role(
        p_role_id IN OUT role.role_id%TYPE,
        p_nazev   IN role.nazev%TYPE,
        o_result  OUT CLOB
    );

    PROCEDURE delete_role(
        p_role_id IN role.role_id%TYPE,
        o_result  OUT CLOB
    );

END pck_role;
/

CREATE OR REPLACE PACKAGE BODY pck_role AS

    PROCEDURE manage_role(
        p_role_id IN OUT role.role_id%TYPE,
        p_nazev   IN role.nazev%TYPE,
        o_result  OUT CLOB
    ) IS
    BEGIN
        IF p_role_id IS NULL THEN
            INSERT INTO role (nazev)
            VALUES (p_nazev)
            RETURNING role_id INTO p_role_id;
            
            o_result := '{ "status": "OK", "message": "Role byla uspesne vytvorena." }';
        ELSE
            UPDATE role
            SET nazev = p_nazev
            WHERE role_id = p_role_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ROLE ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Role byla aktualizovana uspesne." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_role;

    PROCEDURE delete_role(
        p_role_id IN role.role_id%TYPE,
        o_result  OUT CLOB
    ) IS
    BEGIN
        DELETE FROM role WHERE role_id = p_role_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Role nebyla nalezena." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Role byla smazana." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_role;

END pck_role;
/

CREATE OR REPLACE PACKAGE pck_stat AS

    PROCEDURE manage_stat(
        p_stat_id      IN  OUT stat.stat_id %TYPE,
        p_zkratka       stat.zkratka %TYPE,
        p_nazev         stat.nazev %TYPE,
        o_result        OUT VARCHAR2
    );
    
    PROCEDURE delete_stat(
        p_stat_id   IN stat.stat_id %TYPE,
        o_result    OUT VARCHAR2
    );

END pck_stat;
/

CREATE OR REPLACE PACKAGE BODY pck_stat AS

    PROCEDURE manage_stat(
        p_stat_id      IN OUT stat.stat_id%TYPE,
        p_zkratka       stat.zkratka%TYPE,
        p_nazev         stat.nazev%TYPE,
        o_result        OUT VARCHAR2
    ) IS
    BEGIN
        IF p_stat_id IS NULL THEN
            INSERT INTO STAT(ZKRATKA, NAZEV)
            VALUES(p_zkratka, p_nazev)
            RETURNING stat_id INTO p_stat_id;
            o_result := '{ "status": "OK", "message": "Stát přidán úspěně." }';
        ELSE
            UPDATE STAT
            SET ZKRATKA = p_zkratka, NAZEV = p_nazev
            WHERE STAT_ID = p_stat_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID státu nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Stát aktualizován úspěně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END manage_stat;

    PROCEDURE delete_stat(
        p_stat_id   IN stat.stat_id %TYPE,
        o_result    OUT VARCHAR2
    ) IS
    BEGIN
        IF p_stat_id IS NOT NULL THEN
            DELETE FROM STAT WHERE STAT_ID = p_stat_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ID státu nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Stát smazán úspěně." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END delete_stat;

END pck_stat;
/

CREATE OR REPLACE PACKAGE pck_strava AS

    PROCEDURE manage_strava(
        p_strava_id IN OUT strava.strava_id%TYPE,
        p_nazev     IN strava.nazev%TYPE,
        o_result    OUT CLOB
    );

    PROCEDURE delete_strava(
        p_strava_id IN strava.strava_id%TYPE,
        o_result    OUT CLOB
    );

END pck_strava;
/

CREATE OR REPLACE PACKAGE BODY pck_strava AS

    PROCEDURE manage_strava(
        p_strava_id IN OUT strava.strava_id%TYPE,
        p_nazev     IN strava.nazev%TYPE,
        o_result    OUT CLOB
    ) IS
    BEGIN
        IF p_strava_id IS NULL THEN
            INSERT INTO strava (nazev)
            VALUES (p_nazev)
            RETURNING strava_id INTO p_strava_id;
            
            o_result := '{ "status": "OK", "message": "Strava byla uspesne vytvorena." }';
        ELSE
            UPDATE strava
            SET nazev = p_nazev
            WHERE strava_id = p_strava_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Strava ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Strava aktualizovana �sp?�n?." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_strava;

    PROCEDURE delete_strava(
        p_strava_id IN strava.strava_id%TYPE,
        o_result    OUT CLOB
    ) IS
    BEGIN
        DELETE FROM strava WHERE strava_id = p_strava_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Strava nebyla nalezena." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Strava byla smazana." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_strava;

END pck_strava;
/

CREATE OR REPLACE PACKAGE pck_termin AS

    PROCEDURE manage_termin(
        p_termin_id IN OUT termin.termin_id%TYPE,
        p_od         IN termin.od%TYPE,
        p_do         IN termin.do%TYPE,
        p_zajezd_id  IN termin.zajezd_id%TYPE,
        o_result     OUT CLOB
    );

    PROCEDURE delete_termin(
        p_termin_id IN termin.termin_id%TYPE,
        o_result     OUT CLOB
    );

END pck_termin;
/

CREATE OR REPLACE PACKAGE BODY pck_termin AS

    PROCEDURE manage_termin(
        p_termin_id IN OUT termin.termin_id%TYPE,
        p_od         IN termin.od%TYPE,
        p_do         IN termin.do%TYPE,
        p_zajezd_id  IN termin.zajezd_id%TYPE,
        o_result     OUT CLOB
    ) IS
    BEGIN
        IF p_termin_id IS NULL THEN
            INSERT INTO termin (od, do, zajezd_id)
            VALUES (p_od, p_do, p_zajezd_id)
            RETURNING termin_id INTO p_termin_id;
            
            o_result := '{ "status": "OK", "message": "Termin byl uspesne vytvoren." }';
        ELSE
            UPDATE termin
            SET od = p_od,
                do = p_do,
                zajezd_id = p_zajezd_id
            WHERE termin_id = p_termin_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: TERMINY_ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Termin aktualizovan uspesne." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_termin;

    PROCEDURE delete_termin(
        p_termin_id IN termin.termin_id%TYPE,
        o_result     OUT CLOB
    ) IS
    BEGIN
        DELETE FROM termin WHERE termin_id = p_termin_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Termin nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Termin byl smazan." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_termin;

END pck_termin;
/

CREATE OR REPLACE PACKAGE pck_ubytovani AS

    PROCEDURE manage_ubytovani(
        p_ubytovani_id IN OUT ubytovani.ubytovani_id%TYPE,
        p_nazev        IN ubytovani.nazev%TYPE,
        p_popis        IN ubytovani.popis%TYPE,
        p_adresa_id    IN ubytovani.adresa_id%TYPE,
        p_pocet_hvezd  IN ubytovani.pocet_hvezd%TYPE,
        o_result       OUT CLOB
    );

    PROCEDURE delete_ubytovani(
        p_ubytovani_id IN ubytovani.ubytovani_id%TYPE,
        o_result       OUT CLOB
    );

END pck_ubytovani;
/

CREATE OR REPLACE PACKAGE BODY pck_ubytovani AS

    PROCEDURE manage_ubytovani(
        p_ubytovani_id IN OUT ubytovani.ubytovani_id%TYPE,
        p_nazev        IN ubytovani.nazev%TYPE,
        p_popis        IN ubytovani.popis%TYPE,
        p_adresa_id    IN ubytovani.adresa_id%TYPE,
        p_pocet_hvezd  IN ubytovani.pocet_hvezd%TYPE,
        o_result       OUT CLOB
    ) IS
    BEGIN
        IF p_ubytovani_id IS NULL THEN
            INSERT INTO ubytovani (nazev, popis, adresa_id, pocet_hvezd)
            VALUES (p_nazev, p_popis, p_adresa_id, p_pocet_hvezd)
            RETURNING ubytovani_id INTO p_ubytovani_id;

            o_result := '{ "status": "OK", "message": "Ubytování bylo úspěšně vytvořeno." }';
        ELSE
            UPDATE ubytovani
            SET nazev = p_nazev,
                popis = p_popis,
                adresa_id = p_adresa_id,
                pocet_hvezd = p_pocet_hvezd
            WHERE ubytovani_id = p_ubytovani_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: UBYTOVANI_ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Ubytování bylo úspěšně aktualizováno." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END manage_ubytovani;

    PROCEDURE delete_ubytovani(
        p_ubytovani_id IN ubytovani.ubytovani_id%TYPE,
        o_result       OUT CLOB
    ) IS
    BEGIN
        DELETE FROM ubytovani WHERE ubytovani_id = p_ubytovani_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Ubytování nebylo nalezeno." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Ubytování bylo smazáno." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba při operaci: ' || SQLERRM || '" }';
    END delete_ubytovani;

END pck_ubytovani;
/

CREATE OR REPLACE PACKAGE pck_zajezd AS

    PROCEDURE manage_zajezd(
        p_zajezd_id   IN OUT zajezd.zajezd_id%TYPE,
        p_popis       IN zajezd.popis%TYPE,
        p_cena_za_osobu IN zajezd.cena_za_osobu%TYPE,
        p_doprava_id  IN zajezd.doprava_id%TYPE,
        p_ubytovani_id IN zajezd.ubytovani_id%TYPE,
        p_strava_id IN zajezd.strava_id%TYPE,
        p_sleva_procent IN zajezd.sleva_procent%TYPE,
        p_zobrazit    IN zajezd.zobrazit%TYPE,
        o_result      OUT CLOB
    );

    PROCEDURE delete_zajezd(
        p_zajezd_id IN zajezd.zajezd_id%TYPE,
        o_result    OUT CLOB
    );

END pck_zajezd;
/

CREATE OR REPLACE PACKAGE BODY pck_zajezd AS

    PROCEDURE manage_zajezd(
        p_zajezd_id   IN OUT zajezd.zajezd_id%TYPE,
        p_popis       IN zajezd.popis%TYPE,
        p_cena_za_osobu IN zajezd.cena_za_osobu%TYPE,
        p_doprava_id  IN zajezd.doprava_id%TYPE,
        p_ubytovani_id IN zajezd.ubytovani_id%TYPE,
        p_strava_id IN zajezd.strava_id%TYPE,
        p_sleva_procent IN zajezd.sleva_procent%TYPE,
        p_zobrazit    IN zajezd.zobrazit%TYPE,
        o_result      OUT CLOB
    ) IS
    BEGIN
        IF p_zajezd_id IS NULL THEN
            INSERT INTO zajezd (popis, cena_za_osobu, doprava_id, ubytovani_id, sleva_procent, zobrazit, strava_id)
            VALUES (p_popis, p_cena_za_osobu, p_doprava_id, p_ubytovani_id, p_sleva_procent, p_zobrazit, p_strava_id)
            RETURNING zajezd_id INTO p_zajezd_id;
            
            o_result := '{ "status": "OK", "message": "Zajezd byl uspesne vytvoren." }';
        ELSE
            UPDATE zajezd
            SET popis = p_popis,
                cena_za_osobu = p_cena_za_osobu,
                doprava_id = p_doprava_id,
                ubytovani_id = p_ubytovani_id,
                sleva_procent = p_sleva_procent,
                zobrazit = p_zobrazit,
                strava_id = p_strava_id
            WHERE zajezd_id = p_zajezd_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ZAJEZD_ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Zajezd aktualizovan uspesne." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_zajezd;

    PROCEDURE delete_zajezd(
        p_zajezd_id IN zajezd.zajezd_id%TYPE,
        o_result    OUT CLOB
    ) IS
    BEGIN
        DELETE FROM zajezd WHERE zajezd_id = p_zajezd_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Zajezd nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Zajezd byl smazan." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_zajezd;

END pck_zajezd;
/

CREATE OR REPLACE PACKAGE pck_zakaznik AS

    PROCEDURE manage_zakaznik(
        p_zakaznik_id IN OUT zakaznik.zakaznik_id%TYPE,
        p_prihlasovaci_udaje_id IN zakaznik.PRIHLASOVACI_UDAJE_ID%TYPE,
        p_osoba_id IN zakaznik.osoba_id%TYPE,
        p_adresa_id IN zakaznik.adresa_id%TYPE,
        p_kontakt_id IN zakaznik.kontakt_id%TYPE,
        o_result OUT CLOB
    );

    PROCEDURE delete_zakaznik(
        p_zakaznik_id IN zakaznik.zakaznik_id%TYPE,
        o_result OUT CLOB
    );

END pck_zakaznik;
/

CREATE OR REPLACE PACKAGE BODY pck_zakaznik AS

    PROCEDURE manage_zakaznik(
        p_zakaznik_id IN OUT zakaznik.zakaznik_id%TYPE,
        p_prihlasovaci_udaje_id IN zakaznik.PRIHLASOVACI_UDAJE_ID%TYPE,
        p_osoba_id IN zakaznik.osoba_id%TYPE,
        p_adresa_id IN zakaznik.adresa_id%TYPE,
        p_kontakt_id IN zakaznik.kontakt_id%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        IF p_zakaznik_id IS NULL THEN
            INSERT INTO zakaznik (
                prihlasovaci_udaje_id,
                osoba_id,
                adresa_id,
                kontakt_id
            ) VALUES (
                p_prihlasovaci_udaje_id,
                p_osoba_id,
                p_adresa_id,
                p_kontakt_id
            ) RETURNING zakaznik_id INTO p_zakaznik_id;

            o_result := '{ "status": "OK", "message": "Zákazník byl úspěšně vytvořen." }';
        ELSE
            UPDATE zakaznik
            SET
                prihlasovaci_udaje_id = p_prihlasovaci_udaje_id,
                osoba_id = p_osoba_id,
                adresa_id = p_adresa_id,
                kontakt_id = p_kontakt_id
            WHERE
                zakaznik_id = p_zakaznik_id;

            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: Zákazník s daným ID nebyl nalezen." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Zákazník byl úspěšně aktualizován." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při operaci: ' || SQLERRM || '" }';
    END manage_zakaznik;

    PROCEDURE delete_zakaznik(
        p_zakaznik_id IN zakaznik.zakaznik_id%TYPE,
        o_result OUT CLOB
    ) IS
    BEGIN
        DELETE FROM zakaznik WHERE zakaznik_id = p_zakaznik_id;

        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Chyba: Zákazník s daným ID nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Zákazník byl úspěšně smazán." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Došlo k chybě při operaci: ' || SQLERRM || '" }';
    END delete_zakaznik;

END pck_zakaznik;
/

CREATE OR REPLACE PACKAGE pck_zamestnanec AS

    PROCEDURE manage_zamestnanec(
        p_zamestnanec_id IN OUT zamestnanec.zamestnanec_id%TYPE,
        p_role_id       IN zamestnanec.role_id%TYPE,
        p_prihlasovaci_udaje_id    IN zakaznik.PRIHLASOVACI_UDAJE_ID%TYPE,
        p_nadrizeny_id   IN zamestnanec.nadrizeny_id%TYPE,
        p_prijmeni  IN zamestnanec.prijmeni%TYPE,
        p_jmeno     IN zamestnanec.jmeno%TYPE,
        o_result         OUT CLOB
    );

    PROCEDURE delete_zamestnanec(
        p_zamestnanec_id IN zamestnanec.zamestnanec_id%TYPE,
        o_result         OUT CLOB
    );

END pck_zamestnanec;
/

CREATE OR REPLACE PACKAGE BODY pck_zamestnanec AS

    PROCEDURE manage_zamestnanec(
        p_zamestnanec_id IN OUT zamestnanec.zamestnanec_id%TYPE,
        p_role_id       IN zamestnanec.role_id%TYPE,
        p_prihlasovaci_udaje_id    IN zakaznik.PRIHLASOVACI_UDAJE_ID%TYPE,
        p_nadrizeny_id   IN zamestnanec.nadrizeny_id%TYPE,
        p_prijmeni  IN zamestnanec.prijmeni%TYPE,
        p_jmeno     IN zamestnanec.jmeno%TYPE,
        o_result         OUT CLOB
    ) IS
    BEGIN
        IF p_zamestnanec_id IS NULL THEN
            INSERT INTO zamestnanec (role_id, PRIHLASOVACI_UDAJE_ID, nadrizeny_id, prijmeni, jmeno)
            VALUES (p_role_id, p_prihlasovaci_udaje_id, p_nadrizeny_id, p_prijmeni, p_jmeno)
            RETURNING zamestnanec_id INTO p_zamestnanec_id;
            
            o_result := '{ "status": "OK", "message": "Zamestnanec byl uspesne vytvoren." }';
        ELSE
            UPDATE zamestnanec
            SET role_id = p_role_id,
                PRIHLASOVACI_UDAJE_ID = p_prihlasovaci_udaje_id,
                nadrizeny_id = p_nadrizeny_id,
                prijmeni = p_prijmeni,
                jmeno = p_jmeno
            WHERE zamestnanec_id = p_zamestnanec_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                o_result := '{ "status": "error", "message": "Chyba: ZAMESTNANEC ID nebylo nalezeno." }';
            ELSE
                o_result := '{ "status": "OK", "message": "Zamestnanec aktualizovan �sp?�n?." }';
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END manage_zamestnanec;

    PROCEDURE delete_zamestnanec(
        p_zamestnanec_id IN zamestnanec.zamestnanec_id%TYPE,
        o_result         OUT CLOB
    ) IS
    BEGIN
        UPDATE zamestnanec SET nadrizeny_id = NULL WHERE nadrizeny_id = p_zamestnanec_id;
        
        DELETE FROM zamestnanec WHERE zamestnanec_id = p_zamestnanec_id;
        
        IF SQL%ROWCOUNT = 0 THEN
            o_result := '{ "status": "error", "message": "Zamestnanec nebyl nalezen." }';
        ELSE
            o_result := '{ "status": "OK", "message": "Zamestnanec byl smazan." }';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            o_result := '{ "status": "error", "message": "Chyba pri operaci: ' || SQLERRM || '" }';
    END delete_zamestnanec;

END pck_zamestnanec;
/

CREATE OR REPLACE TRIGGER trigger_obrazky_ubytovani
AFTER INSERT OR UPDATE OR DELETE ON OBRAZKY_UBYTOVANI
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'OBRAZKY_UBYTOVANI_ID: ' || :NEW.OBRAZKY_UBYTOVANI_ID || ', ' || 
                   'OBRAZEK: [BLOB DATA]' || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV || ', ' || 
                   'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'OBRAZKY_UBYTOVANI_ID: ' || :OLD.OBRAZKY_UBYTOVANI_ID || ', ' || 
                    'OBRAZEK: [BLOB DATA]' || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV || ', ' || 
                    'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID;
        v_after := 'OBRAZKY_UBYTOVANI_ID: ' || :NEW.OBRAZKY_UBYTOVANI_ID || ', ' || 
                   'OBRAZEK: [BLOB DATA]' || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV || ', ' || 
                   'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'OBRAZKY_UBYTOVANI_ID: ' || :OLD.OBRAZKY_UBYTOVANI_ID || ', ' || 
                    'OBRAZEK: [BLOB DATA]' || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV || ', ' || 
                    'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('OBRAZKY_UBYTOVANI', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_osoba
AFTER INSERT OR UPDATE OR DELETE ON OSOBA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'PRIJMENI: ' || :NEW.PRIJMENI || ', ' || 
                   'DATUM_NAROZENI: ' || :NEW.DATUM_NAROZENI;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'PRIJMENI: ' || :OLD.PRIJMENI || ', ' || 
                    'DATUM_NAROZENI: ' || :OLD.DATUM_NAROZENI;
        v_after := 'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'PRIJMENI: ' || :NEW.PRIJMENI || ', ' || 
                   'DATUM_NAROZENI: ' || :NEW.DATUM_NAROZENI;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'PRIJMENI: ' || :OLD.PRIJMENI || ', ' || 
                    'DATUM_NAROZENI: ' || :OLD.DATUM_NAROZENI;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('OSOBA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_adresa
AFTER INSERT OR UPDATE OR DELETE ON adresa
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'ADRESA_ID: ' || :NEW.ADRESA_ID || ', ' || 
                   'ULICE: ' || :NEW.ULICE || ', ' || 
                   'CISLO_POPISNE: ' || :NEW.CISLO_POPISNE || ', ' || 
                   'MESTO: ' || :NEW.MESTO || ', ' || 
                   'PSC: ' || :NEW.PSC || ', ' || 
                   'POZNAMKA: ' || :NEW.POZNAMKA || ', ' || 
                   'STAT_ID: ' || :NEW.STAT_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'ADRESA_ID: ' || :OLD.ADRESA_ID || ', ' || 
                    'ULICE: ' || :OLD.ULICE || ', ' || 
                    'CISLO_POPISNE: ' || :OLD.CISLO_POPISNE || ', ' || 
                    'MESTO: ' || :OLD.MESTO || ', ' || 
                    'PSC: ' || :OLD.PSC || ', ' || 
                    'POZNAMKA: ' || :OLD.POZNAMKA || ', ' || 
                    'STAT_ID: ' || :OLD.STAT_ID;
        v_after := 'ADRESA_ID: ' || :NEW.ADRESA_ID || ', ' || 
                   'ULICE: ' || :NEW.ULICE || ', ' || 
                   'CISLO_POPISNE: ' || :NEW.CISLO_POPISNE || ', ' || 
                   'MESTO: ' || :NEW.MESTO || ', ' || 
                   'PSC: ' || :NEW.PSC || ', ' || 
                   'POZNAMKA: ' || :NEW.POZNAMKA || ', ' || 
                   'STAT_ID: ' || :NEW.STAT_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'ADRESA_ID: ' || :OLD.ADRESA_ID || ', ' || 
                    'ULICE: ' || :OLD.ULICE || ', ' || 
                    'CISLO_POPISNE: ' || :OLD.CISLO_POPISNE || ', ' || 
                    'MESTO: ' || :OLD.MESTO || ', ' || 
                    'PSC: ' || :OLD.PSC || ', ' || 
                    'POZNAMKA: ' || :OLD.POZNAMKA || ', ' || 
                    'STAT_ID: ' || :OLD.STAT_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('ADRESA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_doprava
AFTER INSERT OR UPDATE OR DELETE ON DOPRAVA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'DOPRAVA_ID: ' || :NEW.DOPRAVA_ID || ', NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'DOPRAVA_ID: ' || :OLD.DOPRAVA_ID || ', NAZEV: ' || :OLD.NAZEV;
        v_after := 'DOPRAVA_ID: ' || :NEW.DOPRAVA_ID || ', NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'DOPRAVA_ID: ' || :OLD.DOPRAVA_ID || ', NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;
    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('DOPRAVA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_kontakt
AFTER INSERT OR UPDATE OR DELETE ON KONTAKT
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'KONTAKT_ID: ' || :NEW.KONTAKT_ID || ', EMAIL: ' || :NEW.EMAIL || ', TELEFON: ' || :NEW.TELEFON;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'KONTAKT_ID: ' || :OLD.KONTAKT_ID || ', EMAIL: ' || :OLD.EMAIL || ', TELEFON: ' || :OLD.TELEFON;
        v_after := 'KONTAKT_ID: ' || :NEW.KONTAKT_ID || ', EMAIL: ' || :NEW.EMAIL || ', TELEFON: ' || :NEW.TELEFON;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'KONTAKT_ID: ' || :OLD.KONTAKT_ID || ', EMAIL: ' || :OLD.EMAIL || ', TELEFON: ' || :OLD.TELEFON;
        v_after := NULL;
    END IF;
    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('KONTAKT', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_objednavka
AFTER INSERT OR UPDATE OR DELETE ON OBJEDNAVKA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;
    
    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID || ', ' || 
                   'POCET_OSOB: ' || :NEW.POCET_OSOB || ', ' || 
                   'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'POJISTENI_ID: ' || :NEW.POJISTENI_ID || ', ' || 
                   'POKOJ_ID: ' || :NEW.POKOJ_ID || ', ' || 
                   'ZAKAZNIK_ID: ' || :NEW.ZAKAZNIK_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID || ', ' || 
                    'POCET_OSOB: ' || :OLD.POCET_OSOB || ', ' || 
                    'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'POJISTENI_ID: ' || (CASE WHEN :OLD.POJISTENI_ID IS NULL THEN 'NULL' ELSE TO_CHAR(:OLD.POJISTENI_ID) END) || ', ' || 
                    'POKOJ_ID: ' || :OLD.POKOJ_ID || ', ' || 
                    'ZAKAZNIK_ID: ' || :OLD.ZAKAZNIK_ID;
        v_after := 'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID || ', ' || 
                   'POCET_OSOB: ' || :NEW.POCET_OSOB || ', ' || 
                   'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'POJISTENI_ID: ' || (CASE WHEN :NEW.POJISTENI_ID IS NULL THEN 'NULL' ELSE TO_CHAR(:NEW.POJISTENI_ID) END) || ', ' || 
                   'POKOJ_ID: ' || :NEW.POKOJ_ID || ', ' || 
                   'ZAKAZNIK_ID: ' || :NEW.ZAKAZNIK_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID || ', ' || 
                    'POCET_OSOB: ' || :OLD.POCET_OSOB || ', ' || 
                    'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'POJISTENI_ID: ' || (CASE WHEN :OLD.POJISTENI_ID IS NULL THEN 'NULL' ELSE TO_CHAR(:OLD.POJISTENI_ID) END) || ', ' || 
                    'POKOJ_ID: ' || :OLD.POKOJ_ID || ', ' || 
                    'ZAKAZNIK_ID: ' || :OLD.ZAKAZNIK_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('OBJEDNAVKA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trg_osoba_objednavka
AFTER INSERT OR UPDATE OR DELETE ON OSOBA_OBJEDNAVKA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' || 
                   'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' || 
                    'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID;
        v_after := 'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' || 
                   'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' || 
                    'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('OSOBA_OBJEDNAVKA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_platba
AFTER INSERT OR UPDATE OR DELETE ON PLATBA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'PLATBA_ID: ' || :NEW.PLATBA_ID || ', ' || 
                   'CASTKA: ' || :NEW.CASTKA || ', ' || 
                   'CISLO_UCTU: ' || :NEW.CISLO_UCTU || ', ' || 
                   'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID || ', ' || 
                   'ZAPLACENA: ' || :NEW.ZAPLACENA;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'PLATBA_ID: ' || :OLD.PLATBA_ID || ', ' || 
                    'CASTKA: ' || :OLD.CASTKA || ', ' || 
                    'CISLO_UCTU: ' || :OLD.CISLO_UCTU || ', ' || 
                    'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID || ', ' || 
                    'ZAPLACENA: ' || :OLD.ZAPLACENA;
        v_after := 'PLATBA_ID: ' || :NEW.PLATBA_ID || ', ' || 
                   'CASTKA: ' || :NEW.CASTKA || ', ' || 
                   'CISLO_UCTU: ' || :NEW.CISLO_UCTU || ', ' || 
                   'OBJEDNAVKA_ID: ' || :NEW.OBJEDNAVKA_ID || ', ' || 
                   'ZAPLACENA: ' || :NEW.ZAPLACENA;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'PLATBA_ID: ' || :OLD.PLATBA_ID || ', ' || 
                    'CASTKA: ' || :OLD.CASTKA || ', ' || 
                    'CISLO_UCTU: ' || :OLD.CISLO_UCTU || ', ' || 
                    'OBJEDNAVKA_ID: ' || :OLD.OBJEDNAVKA_ID || ', ' || 
                    'ZAPLACENA: ' || :OLD.ZAPLACENA;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('PLATBA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_pojisteni
AFTER INSERT OR UPDATE OR DELETE ON POJISTENI
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'POJISTENI_ID: ' || :NEW.POJISTENI_ID || ', ' || 
                   'CENA_ZA_DEN: ' || :NEW.CENA_ZA_DEN || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'POJISTENI_ID: ' || :OLD.POJISTENI_ID || ', ' || 
                    'CENA_ZA_DEN: ' || :OLD.CENA_ZA_DEN || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := 'POJISTENI_ID: ' || :NEW.POJISTENI_ID || ', ' || 
                   'CENA_ZA_DEN: ' || :NEW.CENA_ZA_DEN || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'POJISTENI_ID: ' || :OLD.POJISTENI_ID || ', ' || 
                    'CENA_ZA_DEN: ' || :OLD.CENA_ZA_DEN || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('POJISTENI', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_pokoj
AFTER INSERT OR UPDATE OR DELETE ON POKOJ
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'POKOJ_ID: ' || :NEW.POKOJ_ID || ', ' || 
                   'POCET_MIST: ' || :NEW.POCET_MIST || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'POKOJ_ID: ' || :OLD.POKOJ_ID || ', ' || 
                    'POCET_MIST: ' || :OLD.POCET_MIST || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := 'POKOJ_ID: ' || :NEW.POKOJ_ID || ', ' || 
                   'POCET_MIST: ' || :NEW.POCET_MIST || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'POKOJ_ID: ' || :OLD.POKOJ_ID || ', ' || 
                    'POCET_MIST: ' || :OLD.POCET_MIST || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('POKOJ', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_pokoje_terminu
AFTER INSERT OR UPDATE OR DELETE ON POKOJE_TERMINU
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'CELKOVY_POCET_POKOJU: ' || :NEW.CELKOVY_POCET_POKOJU || ', ' || 
                   'POCET_OBSAZENYCH_POKOJU: ' || :NEW.POCET_OBSAZENYCH_POKOJU || ', ' || 
                   'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'POKOJ_ID: ' || :NEW.POKOJ_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'CELKOVY_POCET_POKOJU: ' || :OLD.CELKOVY_POCET_POKOJU || ', ' || 
                    'POCET_OBSAZENYCH_POKOJU: ' || :OLD.POCET_OBSAZENYCH_POKOJU || ', ' || 
                    'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'POKOJ_ID: ' || :OLD.POKOJ_ID;
        v_after := 'CELKOVY_POCET_POKOJU: ' || :NEW.CELKOVY_POCET_POKOJU || ', ' || 
                   'POCET_OBSAZENYCH_POKOJU: ' || :NEW.POCET_OBSAZENYCH_POKOJU || ', ' || 
                   'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'POKOJ_ID: ' || :NEW.POKOJ_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'CELKOVY_POCET_POKOJU: ' || :OLD.CELKOVY_POCET_POKOJU || ', ' || 
                    'POCET_OBSAZENYCH_POKOJU: ' || :OLD.POCET_OBSAZENYCH_POKOJU || ', ' || 
                    'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'POKOJ_ID: ' || :OLD.POKOJ_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('POKOJE_TERMINU', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_prihlasovaci_udaje
AFTER INSERT OR UPDATE OR DELETE ON PRIHLASOVACI_UDAJE
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'HESLO: ' || :NEW.HESLO;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'HESLO: ' || :OLD.HESLO;
        v_after := 'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'HESLO: ' || :NEW.HESLO;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'HESLO: ' || :OLD.HESLO;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('PRIHLASOVACI_UDAJE', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_role
AFTER INSERT OR UPDATE OR DELETE ON ROLE
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'ROLE_ID: ' || :NEW.ROLE_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'ROLE_ID: ' || :OLD.ROLE_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := 'ROLE_ID: ' || :NEW.ROLE_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'ROLE_ID: ' || :OLD.ROLE_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('ROLE', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_stat
AFTER INSERT OR UPDATE OR DELETE ON STAT
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'STAT_ID: ' || :NEW.STAT_ID || ', ' || 
                   'ZKRATKA: ' || :NEW.ZKRATKA || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'STAT_ID: ' || :OLD.STAT_ID || ', ' || 
                    'ZKRATKA: ' || :OLD.ZKRATKA || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := 'STAT_ID: ' || :NEW.STAT_ID || ', ' || 
                   'ZKRATKA: ' || :NEW.ZKRATKA || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'STAT_ID: ' || :OLD.STAT_ID || ', ' || 
                    'ZKRATKA: ' || :OLD.ZKRATKA || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('STAT', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_strava
AFTER INSERT OR UPDATE OR DELETE ON STRAVA
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'STRAVA_ID: ' || :NEW.STRAVA_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'STRAVA_ID: ' || :OLD.STRAVA_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := 'STRAVA_ID: ' || :NEW.STRAVA_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'STRAVA_ID: ' || :OLD.STRAVA_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('STRAVA', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_termin
AFTER INSERT OR UPDATE OR DELETE ON TERMIN
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'OD: ' || TO_CHAR(:NEW.OD, 'YYYY-MM-DD') || ', ' || 
                   'DO: ' || TO_CHAR(:NEW.DO, 'YYYY-MM-DD') || ', ' || 
                   'ZAJEZD_ID: ' || :NEW.ZAJEZD_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'OD: ' || TO_CHAR(:OLD.OD, 'YYYY-MM-DD') || ', ' || 
                    'DO: ' || TO_CHAR(:OLD.DO, 'YYYY-MM-DD') || ', ' || 
                    'ZAJEZD_ID: ' || :OLD.ZAJEZD_ID;
        v_after := 'TERMIN_ID: ' || :NEW.TERMIN_ID || ', ' || 
                   'OD: ' || TO_CHAR(:NEW.OD, 'YYYY-MM-DD') || ', ' || 
                   'DO: ' || TO_CHAR(:NEW.DO, 'YYYY-MM-DD') || ', ' || 
                   'ZAJEZD_ID: ' || :NEW.ZAJEZD_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'TERMIN_ID: ' || :OLD.TERMIN_ID || ', ' || 
                    'OD: ' || TO_CHAR(:OLD.OD, 'YYYY-MM-DD') || ', ' || 
                    'DO: ' || TO_CHAR(:OLD.DO, 'YYYY-MM-DD') || ', ' || 
                    'ZAJEZD_ID: ' || :OLD.ZAJEZD_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('TERMIN', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_ubytovani
AFTER INSERT OR UPDATE OR DELETE ON UBYTOVANI
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV || ', ' || 
                   'POPIS: ' || :NEW.POPIS || ', ' || 
                   'ADRESA_ID: ' || :NEW.ADRESA_ID || ', ' || 
                   'POCET_HVEZD: ' || :NEW.POCET_HVEZD;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV || ', ' || 
                    'POPIS: ' || :OLD.POPIS || ', ' || 
                    'ADRESA_ID: ' || :OLD.ADRESA_ID || ', ' || 
                    'POCET_HVEZD: ' || :OLD.POCET_HVEZD;
        v_after := 'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID || ', ' || 
                   'NAZEV: ' || :NEW.NAZEV || ', ' || 
                   'POPIS: ' || :NEW.POPIS || ', ' || 
                   'ADRESA_ID: ' || :NEW.ADRESA_ID || ', ' || 
                   'POCET_HVEZD: ' || :NEW.POCET_HVEZD;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID || ', ' || 
                    'NAZEV: ' || :OLD.NAZEV || ', ' || 
                    'POPIS: ' || :OLD.POPIS || ', ' || 
                    'ADRESA_ID: ' || :OLD.ADRESA_ID || ', ' || 
                    'POCET_HVEZD: ' || :OLD.POCET_HVEZD;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('UBYTOVANI', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_zajezd
AFTER INSERT OR UPDATE OR DELETE ON ZAJEZD
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'ZAJEZD_ID: ' || :NEW.ZAJEZD_ID || ', ' || 
                   'POPIS: ' || :NEW.POPIS || ', ' || 
                   'CENA_ZA_OSOBU: ' || :NEW.CENA_ZA_OSOBU || ', ' || 
                   'DOPRAVA_ID: ' || :NEW.DOPRAVA_ID || ', ' || 
                   'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID || ', ' || 
                   'SLEVA_PROCENT: ' || NVL(TO_CHAR(:NEW.SLEVA_PROCENT), 'NULL') || ', ' || 
                   'ZOBRAZIT: ' || :NEW.ZOBRAZIT || ', ' || 
                   'STRAVA_ID: ' || :NEW.STRAVA_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'ZAJEZD_ID: ' || :OLD.ZAJEZD_ID || ', ' || 
                    'POPIS: ' || :OLD.POPIS || ', ' || 
                    'CENA_ZA_OSOBU: ' || :OLD.CENA_ZA_OSOBU || ', ' || 
                    'DOPRAVA_ID: ' || :OLD.DOPRAVA_ID || ', ' || 
                    'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID || ', ' || 
                    'SLEVA_PROCENT: ' || NVL(TO_CHAR(:OLD.SLEVA_PROCENT), 'NULL') || ', ' || 
                    'ZOBRAZIT: ' || :OLD.ZOBRAZIT || ', ' || 
                    'STRAVA_ID: ' || :OLD.STRAVA_ID;
        v_after := 'ZAJEZD_ID: ' || :NEW.ZAJEZD_ID || ', ' || 
                   'POPIS: ' || :NEW.POPIS || ', ' || 
                   'CENA_ZA_OSOBU: ' || :NEW.CENA_ZA_OSOBU || ', ' || 
                   'DOPRAVA_ID: ' || :NEW.DOPRAVA_ID || ', ' || 
                   'UBYTOVANI_ID: ' || :NEW.UBYTOVANI_ID || ', ' || 
                   'SLEVA_PROCENT: ' || NVL(TO_CHAR(:NEW.SLEVA_PROCENT), 'NULL') || ', ' || 
                   'ZOBRAZIT: ' || :NEW.ZOBRAZIT || ', ' || 
                   'STRAVA_ID: ' || :NEW.STRAVA_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'ZAJEZD_ID: ' || :OLD.ZAJEZD_ID || ', ' || 
                    'POPIS: ' || :OLD.POPIS || ', ' || 
                    'CENA_ZA_OSOBU: ' || :OLD.CENA_ZA_OSOBU || ', ' || 
                    'DOPRAVA_ID: ' || :OLD.DOPRAVA_ID || ', ' || 
                    'UBYTOVANI_ID: ' || :OLD.UBYTOVANI_ID || ', ' || 
                    'SLEVA_PROCENT: ' || NVL(TO_CHAR(:OLD.SLEVA_PROCENT), 'NULL') || ', ' || 
                    'ZOBRAZIT: ' || :OLD.ZOBRAZIT || ', ' || 
                    'STRAVA_ID: ' || :OLD.STRAVA_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('ZAJEZD', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_zakaznik
AFTER INSERT OR UPDATE OR DELETE ON ZAKAZNIK
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'ZAKAZNIK_ID: ' || :NEW.ZAKAZNIK_ID || ', ' || 
                   'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' ||
                   'KONTAKT_ID: ' || :NEW.KONTAKT_ID;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'ZAKAZNIK_ID: ' || :OLD.ZAKAZNIK_ID || ', ' || 
                    'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' ||
                   'KONTAKT_ID: ' || :OLD.KONTAKT_ID;
        v_after := 'ZAKAZNIK_ID: ' || :NEW.ZAKAZNIK_ID || ', ' || 
                   'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'OSOBA_ID: ' || :NEW.OSOBA_ID || ', ' ||
                   'KONTAKT_ID: ' || :NEW.KONTAKT_ID;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'ZAKAZNIK_ID: ' || :OLD.ZAKAZNIK_ID || ', ' || 
                    'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'OSOBA_ID: ' || :OLD.OSOBA_ID || ', ' ||
                   'KONTAKT_ID: ' || :OLD.KONTAKT_ID;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('ZAKAZNIK', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trigger_zamestnanec
AFTER INSERT OR UPDATE OR DELETE ON ZAMESTNANEC
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
    v_user VARCHAR2(30);
    v_before CLOB;
    v_after CLOB;
BEGIN
    v_user := USER;

    IF INSERTING THEN 
        v_operation := 'INSERT';
        v_before := NULL;
        v_after := 'ZAMESTNANEC_ID: ' || :NEW.ZAMESTNANEC_ID || ', ' || 
                   'ROLE_ID: ' || :NEW.ROLE_ID || ', ' || 
                   'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'NADRIZENY_ID: ' || NVL(TO_CHAR(:NEW.NADRIZENY_ID), 'NULL') || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'PRIJMENI: ' || :NEW.PRIJMENI;
    ELSIF UPDATING THEN 
        v_operation := 'UPDATE';
        v_before := 'ZAMESTNANEC_ID: ' || :OLD.ZAMESTNANEC_ID || ', ' || 
                    'ROLE_ID: ' || :OLD.ROLE_ID || ', ' || 
                    'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'NADRIZENY_ID: ' || NVL(TO_CHAR(:OLD.NADRIZENY_ID), 'NULL') || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'PRIJMENI: ' || :OLD.PRIJMENI;
        v_after := 'ZAMESTNANEC_ID: ' || :NEW.ZAMESTNANEC_ID || ', ' || 
                   'ROLE_ID: ' || :NEW.ROLE_ID || ', ' || 
                   'PRIHLASOVACI_UDAJE_ID: ' || :NEW.PRIHLASOVACI_UDAJE_ID || ', ' || 
                   'NADRIZENY_ID: ' || NVL(TO_CHAR(:NEW.NADRIZENY_ID), 'NULL') || ', ' || 
                   'JMENO: ' || :NEW.JMENO || ', ' || 
                   'PRIJMENI: ' || :NEW.PRIJMENI;
    ELSIF DELETING THEN 
        v_operation := 'DELETE';
        v_before := 'ZAMESTNANEC_ID: ' || :OLD.ZAMESTNANEC_ID || ', ' || 
                    'ROLE_ID: ' || :OLD.ROLE_ID || ', ' || 
                    'PRIHLASOVACI_UDAJE_ID: ' || :OLD.PRIHLASOVACI_UDAJE_ID || ', ' || 
                    'NADRIZENY_ID: ' || NVL(TO_CHAR(:OLD.NADRIZENY_ID), 'NULL') || ', ' || 
                    'JMENO: ' || :OLD.JMENO || ', ' || 
                    'PRIJMENI: ' || :OLD.PRIJMENI;
        v_after := NULL;
    END IF;

    INSERT INTO LOG_TABLE (TABULKA, OPERACE, CAS_ZMENY, UZIVATEL, PRED, PO)
    VALUES ('ZAMESTNANEC', v_operation, SYSTIMESTAMP, v_user, v_before, v_after);
END;
/

CREATE OR REPLACE TRIGGER trg_after_insert_objednavka
AFTER INSERT ON objednavka
FOR EACH ROW
DECLARE
    v_celkovy_pocet POKOJE_TERMINU.celkovy_pocet_pokoju%TYPE;
    v_pocet_obsazenych POKOJE_TERMINU.pocet_obsazenych_pokoju%TYPE;
BEGIN
    SELECT celkovy_pocet_pokoju, pocet_obsazenych_pokoju
    INTO v_celkovy_pocet, v_pocet_obsazenych
    FROM POKOJE_TERMINU
    WHERE pokoj_id = :NEW.pokoj_id
    AND termin_id = :NEW.termin_id;

    IF v_pocet_obsazenych < v_celkovy_pocet THEN
        UPDATE POKOJE_TERMINU
        SET pocet_obsazenych_pokoju = v_pocet_obsazenych + 1
        WHERE pokoj_id = :NEW.pokoj_id
        AND termin_id = :NEW.termin_id;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Žádné volné místo pro pokoj_id a termin_id.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Žádné data pro pokoj_id a termin_id nalezeno POKOJE_TERMINU.');
END;
/

CREATE OR REPLACE TRIGGER trg_after_delete_objednavka
AFTER DELETE ON objednavka
FOR EACH ROW
DECLARE
    v_celkovy_pocet POKOJE_TERMINU.celkovy_pocet_pokoju%TYPE;
    v_pocet_obsazenych POKOJE_TERMINU.pocet_obsazenych_pokoju%TYPE;
BEGIN
    SELECT pocet_obsazenych_pokoju INTO v_pocet_obsazenych
    FROM POKOJE_TERMINU
    WHERE pokoj_id = :OLD.pokoj_id
    AND termin_id = :OLD.termin_id;

    IF v_pocet_obsazenych > 0 THEN
        UPDATE POKOJE_TERMINU
        SET pocet_obsazenych_pokoju = v_pocet_obsazenych - 1
        WHERE pokoj_id = :OLD.pokoj_id
        AND termin_id = :OLD.termin_id;
    END IF;
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Pro zadané pokoj_id a termin_id bylo vráceno více řádků.');
    WHEN NO_DATA_FOUND THEN
        NULL; 
END;
/

CREATE OR REPLACE TRIGGER trg_update_pocet_osob
AFTER INSERT ON osoba_objednavka
FOR EACH ROW
BEGIN
    UPDATE objednavka
    SET pocet_osob = pocet_osob + 1
    WHERE objednavka_id = :NEW.objednavka_id;
END;
/


CREATE OR REPLACE TRIGGER trg_update_pocet_osob_del
AFTER DELETE ON osoba_objednavka
FOR EACH ROW
BEGIN
    UPDATE objednavka
    SET pocet_osob = pocet_osob - 1 
    WHERE objednavka_id = :OLD.objednavka_id;
END;
/

CREATE OR REPLACE TRIGGER update_castka_after_pocet_osob_change
AFTER UPDATE OF pocet_osob, pojisteni_id ON objednavka
FOR EACH ROW
DECLARE
  v_castka DECIMAL(10,2);
BEGIN
  v_castka := pck_utils.calculate_castka(:NEW.pojisteni_id, :NEW.termin_id, :NEW.pocet_osob);
  
  UPDATE platba
  SET castka = v_castka
  WHERE objednavka_id = :NEW.objednavka_id;
END;
/

CREATE OR REPLACE TRIGGER trg_check_pokoj_id
BEFORE INSERT ON objednavka
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM pokoje_terminu
    WHERE pokoj_id = :NEW.pokoj_id AND termin_id = :NEW.termin_id;

    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Pokoj_id se neshoduje.');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE zajezdy_v_terminu(
    termin_od IN DATE, 
    termin_do IN DATE,
    p_stat_id IN NUMBER,
    p_doprava_id IN NUMBER,
    p_strava_id IN NUMBER,
    pocet_radku IN NUMBER,
    radkovani_start IN NUMBER,
    zajezdy_out OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN zajezdy_out FOR
    SELECT
        z.zajezd_id,
        u.nazev AS Nazev_hotelu,
        u.pocet_hvezd AS Pocet_hvezd,
        SUBSTR(u.popis, 1, 300) as popis,
        s.nazev AS Nazev_statu,
        a.mesto,
        a.psc,
        s.stat_id as Stat_id,
        d.nazev as Doprava,
        d.doprava_id,
        st.nazev as Strava, 
        st.strava_id,
        z.cena_za_osobu AS Cena_za_osobu_plna,
        ROUND(z.cena_za_osobu - (z.cena_za_osobu * (z.sleva_procent / 100))) AS Cena_za_osobu_sleva,
        pck_utils.prvni_img_zajezdy(u.ubytovani_id) AS obrazek_ubytovani_id,
        t.od AS Termin_od,
        t.do AS Termin_do,
        COUNT(*) OVER () AS celkovy_pocet_vysledku
    FROM
        UBYTOVANI u
        JOIN ADRESA a ON u.adresa_id = a.adresa_id
        JOIN STAT s ON a.stat_id = s.stat_id
        JOIN ZAJEZD z ON u.ubytovani_id = z.ubytovani_id
        JOIN DOPRAVA d ON d.doprava_id = z.doprava_id
        JOIN STRAVA st ON st.strava_id = z.strava_id
        JOIN (
            SELECT 
                termin_id,
                od,
                do,
                zajezd_id,
                ROW_NUMBER() OVER (PARTITION BY zajezd_id ORDER BY od ASC) AS rn
            FROM 
                TERMIN
            WHERE 
                do >= termin_od AND 
                od <= termin_do
        ) t ON z.zajezd_id = t.zajezd_id AND t.rn = 1
    WHERE
        z.zobrazit = 1 AND 
        (p_stat_id IS NULL OR s.stat_id = p_stat_id) AND
        (p_doprava_id IS NULL OR d.doprava_id = p_doprava_id) AND
        (p_strava_id IS NULL OR st.strava_id = p_strava_id)
    OFFSET radkovani_start ROWS FETCH NEXT pocet_radku ROWS ONLY;
        
END;
/

CREATE OR REPLACE VIEW ubytovani_view AS
SELECT
    u.ubytovani_id,
    u.nazev,
    u.pocet_hvezd,
    u.popis,
    a.ulice,
    a.cislo_popisne,
    a.mesto,
    a.psc,
    s.nazev as stat_nazev,
    a.ulice || ', ' || a.cislo_popisne || ', ' || a.mesto || ', ' || a.psc || ', ' || s.nazev AS cela_adresa
FROM UBYTOVANI u
JOIN ADRESA a ON u.adresa_id = a.adresa_id
JOIN STAT s ON a.stat_id = s.stat_id;
/

CREATE OR REPLACE VIEW objednavka_view AS
SELECT
    o.objednavka_id,
    z.zakaznik_id,
    os.jmeno,
    os.prijmeni,
    os.jmeno || ' ' || os.prijmeni AS cele_jmeno,
    u.nazev as ubytovani_NAZEV,
    t.od,
    t.do,
    p.nazev as POKOJ_NAZEV,
    pl.castka,
    pl.zaplacena,
    p.pocet_mist
FROM OBJEDNAVKA o
JOIN ZAKAZNIK z ON o.zakaznik_id = z.zakaznik_id
JOIN OSOBA os ON os.osoba_id = z.osoba_id
JOIN TERMIN t ON t.termin_id = o.termin_id
JOIN ZAJEZD zaj ON zaj.zajezd_id = t.zajezd_id
JOIN UBYTOVANI u ON u.ubytovani_id = zaj.ubytovani_id
JOIN POKOJ p ON p.pokoj_id = o.pokoj_id
JOIN PLATBA pl ON pl.objednavka_id = o.objednavka_id;
/

CREATE OR REPLACE VIEW zajezd_sprava_view AS
SELECT
    z.zajezd_id,
    u.nazev as ubytovani_nazev,
    a.ulice,
    a.cislo_popisne,
    a.mesto,
    a.psc,
    s.nazev as stat_nazev,
    a.ulice || ', ' || a.cislo_popisne || ', ' || a.mesto || ', ' || a.psc || ', ' || s.nazev AS cela_adresa,
    z.cena_za_osobu,
    z.sleva_procent,
    d.nazev as doprava_nazev,
    st.nazev as strava_nazev,
    d.doprava_id,
    st.strava_id
FROM ZAJEZD z
JOIN UBYTOVANI u ON u.ubytovani_id = z.ubytovani_id
JOIN DOPRAVA d ON d.doprava_id = z.doprava_id
JOIN STRAVA st ON st.strava_id = z.strava_id
JOIN ADRESA a ON u.adresa_id = a.adresa_id
JOIN STAT s ON a.stat_id = s.stat_id;
/

CREATE OR REPLACE VIEW zakaznik_view AS
SELECT
    z.zakaznik_id,
    o.jmeno,
    o.prijmeni,
    o.jmeno || ' ' || o.prijmeni AS cele_jmeno,
    pu.jmeno as prihlasovaci_jmeno,
    k.email,
    k.telefon,
    a.ulice,
    a.cislo_popisne,
    a.mesto,
    a.psc,
    s.nazev AS stat_nazev,
    a.ulice || ', ' || a.cislo_popisne || ', ' || a.mesto || ', ' || a.psc || ', ' || s.nazev AS cela_adresa
    
FROM ZAKAZNIK z
JOIN PRIHLASOVACI_UDAJE pu ON pu.prihlasovaci_udaje_id = z.prihlasovaci_udaje_id
JOIN KONTAKT k ON k.kontakt_id = z.kontakt_id
JOIN OSOBA o ON o.osoba_id = z.osoba_id
JOIN ADRESA a ON z.adresa_id = a.adresa_id
JOIN STAT s ON a.stat_id = s.stat_id;
/

CREATE OR REPLACE VIEW zamestnanec_view AS
SELECT
    z.zamestnanec_id,
    z.jmeno,
    z.prijmeni,
    z.jmeno || ' ' || z.prijmeni AS cele_jmeno,
    pu.jmeno AS prihlasovaci_jmeno,
    r.nazev AS role_nazev,
    r.role_id,
    n.jmeno AS nadrizeny_jmeno,
    n.prijmeni AS nadrizeny_prijmeni,
    n.jmeno || ' ' || n.prijmeni AS nadrizeny_cele_jmeno,
    pck_utils.zamestnanci_podrizeny(z.zamestnanec_id) podrizeny_podrizenyho
FROM ZAMESTNANEC z
JOIN ROLE r ON r.role_id = z.role_id
JOIN PRIHLASOVACI_UDAJE pu ON pu.prihlasovaci_udaje_id = z.prihlasovaci_udaje_id
LEFT JOIN ZAMESTNANEC n ON n.zamestnanec_id = z.nadrizeny_id;
/

CREATE OR REPLACE VIEW uzivatel_view AS
    SELECT 
        COALESCE(z.zakaznik_id, e.zamestnanec_id) AS uzivatel_id,
        CASE 
            WHEN z.zakaznik_id IS NOT NULL THEN o.jmeno
            ELSE e.jmeno
        END AS jmeno,
        CASE 
            WHEN z.zakaznik_id IS NOT NULL THEN o.prijmeni
            ELSE e.prijmeni
        END AS prijmeni,
        CASE 
            WHEN z.zakaznik_id IS NOT NULL THEN o.jmeno || ' ' || o.prijmeni
            ELSE e.jmeno || ' ' || e.prijmeni
        END AS cele_jmeno,
        pu.jmeno AS prihlasovaci_jmeno,
        pu.heslo AS heslo,
        CASE 
            WHEN z.zakaznik_id IS NOT NULL THEN 'Zákazník'
            ELSE r.nazev
        END AS role
    FROM prihlasovaci_udaje pu
    LEFT JOIN zamestnanec e ON pu.prihlasovaci_udaje_id = e.prihlasovaci_udaje_id
    LEFT JOIN zakaznik z ON pu.prihlasovaci_udaje_id = z.prihlasovaci_udaje_id
    LEFT JOIN osoba o ON z.osoba_id = o.osoba_id
    LEFT JOIN role r ON e.role_id = r.role_id
WHERE COALESCE(z.zakaznik_id, e.zamestnanec_id) IS NOT NULL;
/

CREATE OR REPLACE VIEW tabulky_view AS
SELECT 
    'Table' AS typ_objektu, 
    table_name AS jmeno_objektu 
FROM user_tables;

CREATE OR REPLACE VIEW pohledy_view AS
SELECT 
    'View' AS typ_objektu, 
    view_name AS jmeno_objektu 
FROM user_views;

CREATE OR REPLACE VIEW indexy_view AS
SELECT 
    'Index' AS typ_objektu, 
    index_name AS jmeno_objektu 
FROM user_indexes;

CREATE OR REPLACE VIEW package_view AS
SELECT 
    'Package' AS typ_objektu, 
    object_name AS jmeno_objektu 
FROM user_objects
WHERE object_type = 'PACKAGE';

CREATE OR REPLACE VIEW procedury_view AS
SELECT 
    'Procedure' AS typ_objektu, 
    object_name AS jmeno_objektu 
FROM user_objects
WHERE object_type = 'PROCEDURE';

CREATE OR REPLACE VIEW funkce_view AS
SELECT 
    'Function' AS typ_objektu, 
    object_name AS jmeno_objektu 
FROM user_objects
WHERE object_type = 'FUNCTION';

CREATE OR REPLACE VIEW triggry_view AS
SELECT 
    'Trigger' AS typ_objektu, 
    trigger_name AS jmeno_objektu 
FROM user_triggers;

CREATE OR REPLACE VIEW sekvence_view AS
SELECT 
    'Sequence' AS typ_objektu, 
    sequence_name AS jmeno_objektu 
FROM user_sequences;

DECLARE
    v_role_id role.role_id%TYPE;
    v_result VARCHAR2(100);
BEGIN
v_role_id := NULL;
pck_role.manage_role(v_role_id, 'Admin', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_role_id := NULL;
pck_role.manage_role(v_role_id, 'Zaměstnanec', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_stat_id stat.stat_id%TYPE;
    v_result VARCHAR2(100);
BEGIN
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AFG', 'Afghánistán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ALA', 'Alandy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ALB', 'Albánie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DZA', 'Alžírsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ASM', 'Americká Samoa', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VIR', 'Americké Panenské ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AND', 'Andorra', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AGO', 'Angola', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AIA', 'Anguilla', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ATA', 'Antarktida', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ATG', 'Antigua a Barbuda', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ARG', 'Argentina', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ARM', 'Arménie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ABW', 'Aruba', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AUS', 'Austrálie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AZE', 'Ázerbájdžán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BHS', 'Bahamy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BHR', 'Bahrajn', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BGD', 'Bangladéš', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BRB', 'Barbados', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BEL', 'Belgie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BLZ', 'Belize', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BLR', 'Bělorusko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BEN', 'Benin', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BMU', 'Bermudy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BTN', 'Bhútán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BOL', 'Bolívie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BES', 'Bonaire', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BIH', 'Bosna a Hercegovina', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BWA', 'Botswana', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BVT', 'Bouvetův ostrov', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BRA', 'Brazílie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IOT', 'Britské indickooceánské území', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VGB', 'Britské Panenské ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BRN', 'Brunej', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BGR', 'Bulharsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BFA', 'Burkina Faso', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BDI', 'Burundi', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'COK', 'Cookovy ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CUW', 'Curaçao', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TCD', 'Čad', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MNE', 'Černá Hora', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CZE', 'Česko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CHN', 'Čína', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DNK', 'Dánsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DMA', 'Dominika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DOM', 'Dominikánská republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DJI', 'Džibutsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'EGY', 'Egypt', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ECU', 'Ekvádor', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ERI', 'Eritrea', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'EST', 'Estonsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ETH', 'Etiopie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FRO', 'Faerské ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FLK', 'Falklandy (Malvíny)', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FJI', 'Fidži', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PHL', 'Filipíny', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FIN', 'Finsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FRA', 'Francie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GUF', 'Francouzská Guyana', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ATF', 'Francouzská jižní a antarktická území', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PYF', 'Francouzská Polynésie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GAB', 'Gabon', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GMB', 'Gambie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GHA', 'Ghana', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GIB', 'Gibraltar', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GRD', 'Grenada', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GRL', 'Grónsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GEO', 'Gruzie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GLP', 'Guadeloupe', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GUM', 'Guam', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GTM', 'Guatemala', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GGY', 'Guernsey', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GIN', 'Guinea', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GNB', 'Guinea-Bissau', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GUY', 'Guyana', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HTI', 'Haiti', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HMD', 'Heardův ostrov a MacDonaldovy ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HND', 'Honduras', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HKG', 'Hongkong', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CHL', 'Chile', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HRV', 'Chorvatsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IND', 'Indie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IDN', 'Indonésie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IRQ', 'Irák', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IRN', 'Írán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IRL', 'Irsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ISL', 'Island', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ITA', 'Itálie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ISR', 'Izrael', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'JAM', 'Jamajka', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'JPN', 'Japonsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'YEM', 'Jemen', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'JEY', 'Jersey', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ZAF', 'Jižní Afrika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SGS', 'Jižní Georgie a Jižní Sandwichovy ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SSD', 'Jižní Súdán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'JOR', 'Jordánsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CYM', 'Kajmanské ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KHM', 'Kambodža', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CMR', 'Kamerun', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CAN', 'Kanada', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CPV', 'Kapverdy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'QAT', 'Katar', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KAZ', 'Kazachstán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KEN', 'Keňa', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KIR', 'Kiribati', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CCK', 'Kokosové (Keelingovy) ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'COL', 'Kolumbie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'COM', 'Komory', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'COD', 'Konžská demokratická republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'COG', 'Konžská republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PRK', 'Korejská lidově demokratická republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KOR', 'Korejská republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'XXK', 'Kosovo', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CRI', 'Kostarika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CUB', 'Kuba', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KWT', 'Kuvajt', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CYP', 'Kypr', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KGZ', 'Kyrgyzstán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LAO', 'Laos', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LSO', 'Lesotho', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LBN', 'Libanon', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LBR', 'Libérie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LBY', 'Libye', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LIE', 'Lichtenštejnsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LTU', 'Litva', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LVA', 'Lotyšsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LUX', 'Lucembursko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MAC', 'Macao', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MDG', 'Madagaskar', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'HUN', 'Maďarsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MYS', 'Malajsie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MWI', 'Malawi', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MDV', 'Maledivy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MLI', 'Mali', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MLT', 'Malta', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'IMN', 'Man', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MAR', 'Maroko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MHL', 'Marshallovy ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MTQ', 'Martinik', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MUS', 'Mauricius', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MRT', 'Mauritánie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MYT', 'Mayotte', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'UMI', 'Menší odlehlé ostrovy USA', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MEX', 'Mexiko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'FSM', 'Mikronésie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MDA', 'Moldavsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MCO', 'Monako', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MNG', 'Mongolsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MSR', 'Montserrat', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MOZ', 'Mosambik', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MMR', 'Myanmar', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NAM', 'Namibie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NRU', 'Nauru', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'DEU', 'Německo', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NPL', 'Nepál', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NER', 'Niger', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NGA', 'Nigérie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NIC', 'Nikaragua', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NIU', 'Niue', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NLD', 'Nizozemsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NFK', 'Norfolk', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NOR', 'Norsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NCL', 'Nová Kaledonie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'NZL', 'Nový Zéland', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'OMN', 'Omán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PAK', 'Pákistán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PLW', 'Palau', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PSE', 'Palestina', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PAN', 'Panama', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PNG', 'Papua Nová Guinea', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PRY', 'Paraguay', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PER', 'Peru', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PCN', 'Pitcairn', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CIV', 'Pobřeží slonoviny', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'POL', 'Polsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PRI', 'Portoriko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'PRT', 'Portugalsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'AUT', 'Rakousko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'REU', 'Réunion', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GNQ', 'Rovníková Guinea', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ROU', 'Rumunsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'RUS', 'Rusko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'RWA', 'Rwanda', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GRC', 'Řecko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SPM', 'Saint Pierre a Miquelon', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SLV', 'Salvador', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'WSM', 'Samoa', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SMR', 'San Marino', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SAU', 'Saúdská Arábie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SEN', 'Senegal', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MKD', 'Severní Makedonie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MNP', 'Severní Mariany', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SYC', 'Seychely', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SLE', 'Sierra Leone', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SGP', 'Singapur', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SVK', 'Slovensko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SVN', 'Slovinsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SOM', 'Somálsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ARE', 'Spojené arabské emiráty', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'USA', 'Spojené státy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SRB', 'Srbsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CAF', 'Středoafrická republika', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SDN', 'Súdán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SUR', 'Surinam', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SHN', 'Svatá Helena', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LCA', 'Svatá Lucie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'BLM', 'Svatý Bartoloměj', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'KNA', 'Svatý Kryštof a Nevis', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'MAF', 'Svatý Martin (FR)', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SXM', 'Svatý Martin (NL)', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'STP', 'Svatý Tomáš a Princův ostrov', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VCT', 'Svatý Vincenc a Grenadiny', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SWZ', 'Svazijsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SYR', 'Sýrie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SLB', 'Šalomounovy ostrovy', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ESP', 'Španělsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SJM', 'Špicberky a Jan Mayen', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'LKA', 'Šrí Lanka', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'SWE', 'Švédsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CHE', 'Švýcarsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TJK', 'Tádžikistán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TZA', 'Tanzanie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'THA', 'Thajsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TWN', 'Tchaj-wan', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TGO', 'Togo', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TKL', 'Tokelau', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TON', 'Tonga', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TTO', 'Trinidad a Tobago', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TUN', 'Tunisko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TUR', 'Turecko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TKM', 'Turkmenistán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TCA', 'Turks a Caicos', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TUV', 'Tuvalu', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'UGA', 'Uganda', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'UKR', 'Ukrajina', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'URY', 'Uruguay', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'UZB', 'Uzbekistán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'CXR', 'Vánoční ostrov', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VUT', 'Vanuatu', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VAT', 'Vatikán', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'GBR', 'Velká Británie a Severní Irsko', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VEN', 'Venezuela', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'VNM', 'Vietnam', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'TLS', 'Východní Timor', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'WLF', 'Wallis a Futuna', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ZMB', 'Zambie', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ESH', 'Západní Sahara', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
v_stat_id := NULL;
pck_stat.manage_stat(v_stat_id, 'ZWE', 'Zimbabwe', v_result);
DBMS_OUTPUT.PUT_LINE(v_result);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/